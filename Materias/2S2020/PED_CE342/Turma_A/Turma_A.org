#+OPTIONS: toc:nil
#+TITLE: Notas CE 342/A
#+AUTHOR: Gabriel Petrini (PED)
#+DATE: 2020/2S
#+PROPERTY: COLUMNS %RA %TAREFA(Tarefa) %NOTA(Nota)
#+EXCLUDE_TAGS: private noexport
#+PROPERTY: header-args:python  :session *Turma_A* :python /usr/bin/python3 :exports results
#+LATEX_HEADER: \usepackage{longtable, pdflscape, booktabs}

* Configuração                                                     :noexport:

** Pacotes
#+BEGIN_SRC python
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import numpy as np
import sympy as sp
np.random.seed(3421)
import textdistance as td

Turma = "A"
full_path = './Materias/2S2020/PED_CE342/Turma_' + Turma
num_grupos = 12
Resenhas = ["Monetaristas", "Novos Clássicos", "Novos Keynesianos", "Novo Consenso"]
#+END_SRC

#+RESULTS:

** Importando tabela Ana Rosa

#+BEGIN_SRC python :export no
df = pd.read_excel(
    #'Materias/2S2020/PED_CE342/Lista presença 2020.xlsx',
    '../Lista presença 2020.xlsx',
    sheet_name="CE342_" + Turma,
    parse_dates=True,
)
df["Nome"] = [nome.lower().strip() for nome in df["Nome"]] # Covert to lower case
df.set_index(["Nome"], inplace=True)
df.drop(["Unnamed: 17"], axis='columns', inplace=True) # Removendo coluna vazia e coluna de e-mails (é possível inferir)
#df.columns = pd.to_datetime(df.columns, errors='ignore', format='%Y-%m-%d')
min_df = df[["RA"]].astype(str)
#+END_SRC

#+RESULTS:

** Funções

#+BEGIN_SRC python
def importar_ext(Turma=Turma, data="2020-10-19", prefix='.', rows=3):
    tmp = pd.read_csv(
        f'{prefix}/Presença/Turma_{Turma} ({data}).csv',
        skiprows=rows,
        usecols=[0,6,7],
        sep=',',
    )

    tmp["Nome"] = [nome.lower() for nome in tmp["Names"]]

    tmp["Tempo"] = [float(str(i).replace('"', '')) for i in tmp[' "# of Checks"']]
    tmp["Entrada"] = [float(str(i).replace('"', '')) for i in tmp[' "Joined"']]
    tmp.set_index(['Nome'], inplace=True)
    tmp[f"{data}"] = ((tmp["Tempo"]/np.max(tmp["Tempo"]))*100).round(2)
    tmp = tmp[:-2][[f"{data}"]].fillna(0) # Descartando rodapé
    #midx = pd.MultiIndex.from_product([[f'{data}'], ['Presença', 'Entrada']], names=['Data', f'Turma {Turma}']) # criando multiindex
    #tmp = pd.DataFrame(tmp, columns=midx) # Criando df com multindex

    return tmp


#+END_SRC

#+RESULTS:

** Merge e exportação
   
#+BEGIN_SRC python
monetaristas = pd.read_csv(
#    full_path +
    '.' + 
    '/Notas/Monetaristas.csv'
)[["Endereço de e-mail", "Nota", "Status da atividade"]]
monetaristas["RA"] = [i[1:7] for i in  monetaristas["Endereço de e-mail"]]
monetaristas.drop(["Endereço de e-mail", "Status da atividade"], axis="columns", inplace=True)
monetaristas.set_index("RA", inplace=True)
monetaristas.columns = ["Resenha Monetaristas"]

nv_classicos = pd.read_csv(
#    full_path +
    '.' + 
    '/Notas/NovosClassicos.csv'
)[["Endereço de e-mail", "Nota"]]
nv_classicos["RA"] = [i[1:7] for i in  nv_classicos["Endereço de e-mail"]]
nv_classicos.drop(["Endereço de e-mail"], axis="columns", inplace=True)
nv_classicos.set_index("RA", inplace=True)
nv_classicos.columns = ["Resenha Novos Clássicos"]


df = min_df.reset_index().merge(
    monetaristas.reset_index(),
    how='left',
    ).join(
    importar_ext(Turma=Turma, data="2020-10-19"),
    how='left', on='Nome'
    ).join(
        importar_ext(Turma=Turma, data="2020-10-26"),
        how='left', on='Nome'
    ).set_index('RA').join(
        importar_ext(Turma=Turma, data="2020-11-09"),
        how='left', on='Nome'
     ).reset_index().merge(
    nv_classicos.reset_index(),
    how='left',
    ).set_index('RA')#.join(
     #   importar_ext(Turma=Turma, data="2020-11-16"),
     #   how='left', on='Nome'
     #)

df["Email"] = [df["Nome"][i][0] + str(df.index[i]) + "@dac.unicamp.br" for i in range(len(df.index))]
#+END_SRC

#+RESULTS:





* Monetaristas

** Pendências                                                        :ignore:

** Notas                                                             :ignore:

#+NAME:Monetaristas
#+BEGIN_SRC python :results table latex
print('\\begin{center}')
print(
    df[["Resenha Monetaristas"]].to_latex(
        caption=f"Notas das resenhas - {Resenhas[0]}",
        bold_rows=True,
        longtable=True,
        na_rep='-',
    ),end='')
print('\end{center}')
#+END_SRC

#+RESULTS: Monetaristas
#+begin_export latex
| None |
#+end_export

** Gráficos                                                          :ignore:
*** Notas
#+BEGIN_SRC python :results graphics file :file ./figs/monetaristas.png
fig, ax = plt.subplots(1,2, figsize=(8,5), sharey=True)

sns.distplot(df['Resenha Monetaristas'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[0],
             kde_kws={'linewidth': 4, 'shade': True})

ax[0].set_title(f'Nota das resenhas\nTurma {Turma}')
ax[0].text(90, 0.03, f'$\mu = ${df["Resenha Monetaristas"].mean().round(1)/10}', fontsize=12)
ax[0].text(90, 0.027, f'$\sigma = ${df["Resenha Monetaristas"].std().round(1)/10}', fontsize=12)


sns.distplot(df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[1],
             kde_kws={'linewidth': 4, 'shade': True})

ax[1].set_title('Nota das resenhas\n(Exceto não entregues)')
ax[1].text(90, 0.03, f"$\mu = ${df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'].mean().round(1)/10}", fontsize=12)
ax[1].text(90, 0.027, f"$\sigma = ${round(df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'].std())/10}", fontsize=12)
ax[1].set_ylabel('Densidade')

plt.tight_layout()
fig.savefig('./figs/monetaristas.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/monetaristas.png]]

*** Notas e presença

#+BEGIN_SRC python :results graphics file :file ./figs/monetaristas_presenca.png
tmp = df.copy()

tmp["Média presença"] = tmp[["2020-10-19", "2020-10-26"]].mean(axis=1)

resenha = "Monetaristas"

fig, ax = plt.subplots()

sns.regplot(x="Média presença", y=f"Resenha {resenha}", data=tmp, ax=ax, y_jitter=.05);

ax.set_title(f"Nota x Presença\nResenha {resenha} - Turma {Turma}")

fig.savefig('./figs/monetaristas_presenca.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/monetaristas_presenca.png]]

* Novos Clássicos

** Pendências                                                        :ignore:

- [ ] Identificar respostas das questões (forms)
- [ ] Computar notas 
- [ ] Preencher presenhas na tabela da Ana Rosa
** Notas                                                             :ignore:

#+NAME:NovosCla
#+BEGIN_SRC python :results table latex
print('\\begin{center}')
print(
    df[["Resenha Novos Clássicos"]].to_latex(
        caption=f"Notas das resenhas - {Resenhas[1]}",
        bold_rows=True,
        longtable=True,
        na_rep='-',
    ),end='')
print('\end{center}')
#+END_SRC

#+RESULTS: NovosCla
#+begin_export latex
| None |
#+end_export

** Gráficos                                                          :ignore:
*** Notas   
#+BEGIN_SRC python :results graphics file :file ./figs/novosclassicos.png
fig, ax = plt.subplots(1,2, figsize=(8,5), sharey=True)
sns.distplot(df['Resenha Novos Clássicos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[0],
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(df["Resenha Novos Clássicos"].mean())

sigma = df["Resenha Novos Clássicos"].std().round(1)/10

ax[0].set_title(f'Nota das resenhas\nTurma {Turma}')
ax[0].text(10, 0.5, f'$\mu = ${mu}', fontsize=12)
ax[0].text(10, 0.47, f'$\sigma = ${sigma}', fontsize=12)


sns.distplot(df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[1],
             kde_kws={'linewidth': 4, 'shade': True})

ax[1].set_title('Nota das resenhas\n(Exceto não entregues)')
ax[1].text(10, 0.5, f"$\mu = ${df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'].mean().round(1)}", fontsize=12)
ax[1].text(10, 0.47, f"$\sigma = ${round(df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'].std())/10}", fontsize=12)
ax[1].set_ylabel('Densidade')

plt.tight_layout()
fig.savefig('./figs/novosclassicos.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novosclassicos.png]]
*** Notas e Presença
#+BEGIN_SRC python :results graphics file :file ./figs/novosclassicos_presenca.png
tmp = df.copy()

tmp["Média presença"] = tmp[["2020-10-19", "2020-10-26", "2020-11-09"]].mean(axis=1)

resenha = "Novos Clássicos"

fig, ax = plt.subplots()

sns.regplot(x="Média presença", y=f"Resenha {resenha}", data=tmp, ax=ax, y_jitter=.05);

ax.set_title(f"Nota x Presença\nResenha {resenha} - Turma {Turma}")

fig.savefig('./figs/novosclassicos_presenca.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novosclassicos_presenca.png]]

** Verificação de plágio por amostragem
*** Sorteio
    
#+BEGIN_SRC python :results output :exports both
pre_selecionados = ["238414"]
alunos = df.shape[0]
sample = 0.3
amostra = round(alunos*sample)
bad_df = df.index.isin(pre_selecionados)
elegivies = df.loc[~bad_df].query('`Resenha Novos Clássicos` > 0')["Resenha Novos Clássicos"].index.tolist()


resultado = np.sort(np.random.choice(
    a = elegivies,
    size = amostra,
    replace = False # Sem repetição
))
resultado = pd.DataFrame(resultado)
resultado.columns = ["RA Sorteados"]
resultado.index = [i + 1 for i in resultado.index]
print(resultado)
resultado
#+END_SRC

#+RESULTS:
#+begin_example
    RA Sorteados
1              1
2              2
3              8
4             21
5             22
6             23
7             26
8             28
9             34
10            36
11            37
12            38
13            42
#+end_example

*** Resultado Turnitin

#+CAPTION: Resumo relatório de origilidadade
#+NAME:TurnitinNvC
|--------+--------------------|
|     RA | Grau de semelhança |
|--------+--------------------|
| 156242 |                15% |
| 187323 |                20% |
| 212900 |                 1% |
| 219613 |                 0% |
| 219907 |                 8% |
| 222615 |                 0% |
| 231302 |                 2% |
| 232795 |                11% |
| 238414 |                 2% |
| 239052 |                 8% |
| 240409 |                 0% |
| 244321 |                 1% |
| 244379 |                 1% |
| 245459 |                53% |
|--------+--------------------|

**** Gráfico
#+BEGIN_SRC python :var turnitin=TurnitinNvC :results file graphics :file ./figs/turintin_NvC_fig.png
turnitin = pd.DataFrame(
    turnitin[1:],
    columns=["RA", "Grau de Semelhança"],
)
turnitin["Grau de Semelhança"] = [int(grau[:-1])/100 for grau in turnitin["Grau de Semelhança"]]
turnitin.set_index("RA", inplace=True)

fig, ax = plt.subplots(1,1, figsize=(8,5), sharey=True)
sns.distplot(turnitin, hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax,
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(turnitin["Grau de Semelhança"].mean()*100)

sigma = turnitin["Grau de Semelhança"].std().round(1)*100

ax.set_title(f'Checagem de plágio\nTurma {Turma}')
ax.text(-0.15, 10, f'$\mu = ${mu}', fontsize=12)
ax.text(-0.15, 9.5, f'$\sigma = ${sigma}', fontsize=12)

sns.despine()
plt.savefig('./figs/turintin_NvC_fig.png')
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/turintin_NvC_fig.png]]
**** Atualização das notas

#+BEGIN_SRC python
df.loc["245459", "Resenha Novos Clássicos"] = 0.0

df.loc["238414", "Resenha Novos Clássicos"] = 5.0 
#+END_SRC

#+RESULTS:
** Questões

*** Importando respostas                                             :ignore:

#+BEGIN_SRC python
questoes = pd.read_csv(
    './Questoes/MonetaristasNovosClassicos.csv',
    index_col=[0]
)
questoes.columns = ["Q1", "Q2", "Justificativa"]
questoes["Nota_1"] = [int(res=="Falso") for res in questoes["Q1"]]
questoes["Nota_2"] = [int(res=="Falso") for res in questoes["Q2"]]
tmp_idx = pd.Index([i[:16] for i in questoes.index.tolist()])
print(f"Sobreposição das respostas {sum(tmp_idx.duplicated())/len(tmp_idx)}%")
#+END_SRC

#+RESULTS:
: None

*** Importando pacotes e funções

#+BEGIN_SRC python :results graphics file :file ./figs/similarity_forms_1.png
import string
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from nltk.corpus import stopwords
stopwords = stopwords.words('portuguese')

sentences = questoes["Justificativa"]

def clean_string(text):
    text = ''.join([word for word in text if word not in string.punctuation])
    text = text.lower()
    text = ' '.join([word for word in text.split() if word not in stopwords])

    return text

cleaned = list(map(clean_string, sentences))
vectorizer = CountVectorizer().fit_transform(cleaned)
vectors = vectorizer.toarray()
csim = cosine_similarity(vectors)


def coisine_sim_vectors(vec1, vec2):
    vec1 = vec1.reshape(1,-1)
    vec2 = vec2.reshape(1,-1)
    return coisine_similarity(vec1, vec2)[0][0]


plt.matshow(csim);
plt.colorbar()
plt.title(f'Matriz de similaridade das justificativas\n Turma {Turma}\n')
plt.tight_layout()
plt.savefig('./figs/similarity_forms_1.png')
plt.close()

#+END_SRC

#+RESULTS:
[[file:./figs/similarity_forms_1.png]]


#+BEGIN_SRC python :results table latex
triang  = np.triu(csim, k=0).tolist()
subset = [i > 0.7 and i < 1.0 for i in triang[1]]
print(questoes[subset].to_latex())
#+END_SRC

#+RESULTS:
#+begin_export latex
| None |
#+end_export


* Lista de presença e notas
** Lista de chamada com nota das resenhas                            :ignore:
#+NAME:Lista
#+BEGIN_SRC python :results table latex
print('\\begin{center}\\begin{landscape}')
print('\small\n\setlength\LTleft{0pt}\n\setlength\LTright{0pt}')
print(
    df.to_latex(
        caption="Lista de presença e de notas",
        bold_rows=True,
        longtable=True,
        na_rep='-',
        label="lista"
), end='')
print('\end{landscape}\end{center}')
#+END_SRC

#+RESULTS: Lista
#+begin_export latex
| None |
#+end_export


* Seminários
** Sorteio

#+BEGIN_SRC python :results table latex
atas = [f"Ata {i}" for i in np.random.choice(a=[i for i in range(1,num_grupos+1)], size=num_grupos, replace=False)]
grupos = {f"Grupo {i+1}":atas[i] for i in range(num_grupos)}
grupos = pd.DataFrame(grupos, index=[0]).transpose()
grupos.columns=['Resultado']
grupos.index.name='Grupos'
print(grupos.to_latex(caption="Resultado sorteio das atas - Seminários"))
#+END_SRC

#+RESULTS:
#+begin_export latex
| None |
#+end_export


*** TODO Selecionar Atas e criar map para substituir
* Exportando notas                                                 :noexport:

#+BEGIN_SRC python
df.to_csv(f'./output/CE342_{Turma}.csv')
df.to_excel(f'./output/CE342_{Turma}.xlsx')
#+END_SRC

#+RESULTS:
: None
