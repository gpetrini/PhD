#+OPTIONS: toc:nil
#+TITLE: Notas CE 342/A
#+AUTHOR: Gabriel Petrini (PED)
#+DATE: 2020/2S
#+PROPERTY: COLUMNS %RA %TAREFA(Tarefa) %NOTA(Nota)
#+EXCLUDE_TAGS: private noexport
#+PROPERTY: header-args:python  :session *Turma_A* :exports results :results output replace
#+LATEX_HEADER: \usepackage{longtable, pdflscape, booktabs}

* Configuração                                                     :noexport:

** Pacotes
#+BEGIN_SRC python
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import datetime
import numpy as np
import sympy as sp
np.random.seed(3421)
import textdistance as td

Turma = "A"
full_path = './Materias/2S2020/PED_CE342/Turma_' + Turma
num_grupos = 12
Resenhas = ["Monetaristas", "Novos Clássicos", "Novos Keynesianos", "Novo Consenso"]
#+END_SRC

#+RESULTS:

** Importando tabela Ana Rosa

#+BEGIN_SRC python :export no
df = pd.read_excel(
    #'Materias/2S2020/PED_CE342/Lista presença 2020.xlsx',
    '../Lista presença 2020.xlsx',
    sheet_name="CE342_" + Turma,
    parse_dates=True,
)
df["Nome"] = [nome.lower().strip() for nome in df["Nome"]] # Covert to lower case
df.set_index(["Nome"], inplace=True)
df.drop(["Unnamed: 17"], axis='columns', inplace=True) # Removendo coluna vazia e coluna de e-mails (é possível inferir)
#df.columns = pd.to_datetime(df.columns, errors='ignore', format='%Y-%m-%d')
min_df = df[["RA"]].astype(str)
#+END_SRC

#+RESULTS:

** Funções

#+BEGIN_SRC python
def importar_ext(Turma=Turma, data="2020-10-19", prefix='.', rows=3):
    tmp = pd.read_csv(
        f'{prefix}/Presença/Turma_{Turma} ({data}).csv',
        skiprows=rows,
        usecols=[0,6,7],
        sep=',',
    )

    tmp["Nome"] = [nome.lower() for nome in tmp["Names"]]

    tmp["Tempo"] = [float(str(i).replace('"', '')) for i in tmp[' "# of Checks"']]
    tmp["Entrada"] = [float(str(i).replace('"', '')) for i in tmp[' "Joined"']]
    tmp.set_index(['Nome'], inplace=True)
    tmp[f"{data}"] = ((tmp["Tempo"]/np.max(tmp["Tempo"]))*100).round(2)
    tmp = tmp[:-2][[f"{data}"]].fillna(0) # Descartando rodapé
    #midx = pd.MultiIndex.from_product([[f'{data}'], ['Presença', 'Entrada']], names=['Data', f'Turma {Turma}']) # criando multiindex
    #tmp = pd.DataFrame(tmp, columns=midx) # Criando df com multindex

    return tmp


#+END_SRC

#+RESULTS:

** Merge

#+BEGIN_SRC python
monetaristas = pd.read_csv(
    #    full_path +
    "."
    + "/Notas/Monetaristas.csv"
)[["Endereço de e-mail", "Nota", "Status da atividade"]]
monetaristas["RA"] = [i[1:7] for i in monetaristas["Endereço de e-mail"]]
monetaristas.drop(
    ["Endereço de e-mail", "Status da atividade"], axis="columns", inplace=True
)
monetaristas.set_index("RA", inplace=True)
monetaristas.columns = ["Resenha Monetaristas"]

nv_classicos = pd.read_csv(
    #    full_path +
    "."
    + "/Notas/NovosClassicos.csv"
)[["Endereço de e-mail", "Nota"]]
nv_classicos["RA"] = [i[1:7] for i in nv_classicos["Endereço de e-mail"]]
nv_classicos.drop(["Endereço de e-mail"], axis="columns", inplace=True)
nv_classicos.set_index("RA", inplace=True)
nv_classicos.columns = ["Resenha Novos Clássicos"]

nv_keynesianos = pd.read_csv(
    #    full_path +
    "."
    + "/Notas/NovosKeynesianos.csv"
)[["Endereço de e-mail", "Nota"]]
nv_keynesianos["RA"] = [i[1:7] for i in nv_keynesianos["Endereço de e-mail"]]
nv_keynesianos.drop(["Endereço de e-mail"], axis="columns", inplace=True)
nv_keynesianos.set_index("RA", inplace=True)
nv_keynesianos.columns = ["Resenha Novos Keynesianos"]

df = (
    min_df.reset_index()
    .merge(
        monetaristas.reset_index(),
        how="left",
    )
    .join(importar_ext(Turma=Turma, data="2020-10-19"), how="left", on="Nome")
    .join(importar_ext(Turma=Turma, data="2020-10-26"), how="left", on="Nome")
    .set_index("RA")
    .join(importar_ext(Turma=Turma, data="2020-11-09"), how="left", on="Nome")
    .reset_index()
    .merge(
        nv_classicos.reset_index(),
        how="left",
    )
    .set_index("RA")
    .join(importar_ext(Turma=Turma, data="2020-11-16"), how="left", on="Nome")
    .join(importar_ext(Turma=Turma, data="2020-11-23"), how="left", on="Nome")
    .reset_index()
    .merge(nv_keynesianos.reset_index(), how="left")
    .set_index("RA")
)
df["Email"] = [
    df["Nome"][i][0] + str(df.index[i]) + "@dac.unicamp.br"
    for i in range(len(df.index))
]
#+END_SRC

#+RESULTS:


* Monetaristas

** Pendências                                                        :ignore:

** Notas                                                             :ignore:

#+NAME:Monetaristas
#+BEGIN_SRC python :results table latex 
print('\\begin{center}')
print(
    df[["Resenha Monetaristas"]].to_latex(
        caption=f"Notas das resenhas - {Resenhas[0]}",
        bold_rows=True,
        longtable=True,
        na_rep='-',
    ),end='')
print('\end{center}')
#+END_SRC

#+RESULTS: Monetaristas
#+begin_export latex
\begin{center}
\begin{longtable}{lr}
\caption{Notas das resenhas - Monetaristas}\\
\toprule
{} &  Resenha Monetaristas \\
\textbf{RA    } &                       \\
\midrule
\endhead
\midrule
\multicolumn{2}{r}{{Continued on next page}} \\
\midrule
\endfoot

\bottomrule
\endlastfoot
\textbf{212883} &                  50.0 \\
\textbf{212900} &                  50.0 \\
\textbf{231302} &                  70.0 \\
\textbf{231732} &                   0.0 \\
\textbf{213360} &                  70.0 \\
\textbf{231898} &                  70.0 \\
\textbf{213731} &                  70.0 \\
\textbf{232395} &                  30.0 \\
\textbf{232796} &                  70.0 \\
\textbf{233335} &                  50.0 \\
\textbf{233747} &                  70.0 \\
\textbf{255207} &                  50.0 \\
\textbf{216459} &                   0.0 \\
\textbf{235951} &                  30.0 \\
\textbf{236276} &                   0.0 \\
\textbf{218090} &                  70.0 \\
\textbf{255241} &                  50.0 \\
\textbf{237618} &                  70.0 \\
\textbf{199735} &                  50.0 \\
\textbf{218975} &                  70.0 \\
\textbf{238414} &                  70.0 \\
\textbf{219613} &                  50.0 \\
\textbf{219907} &                 100.0 \\
\textbf{239052} &                  70.0 \\
\textbf{220194} &                  70.0 \\
\textbf{201326} &                  50.0 \\
\textbf{156242} &                   0.0 \\
\textbf{240317} &                  30.0 \\
\textbf{240409} &                  70.0 \\
\textbf{221515} &                  50.0 \\
\textbf{255293} &                  30.0 \\
\textbf{241430} &                  50.0 \\
\textbf{222315} &                  50.0 \\
\textbf{184528} &                  50.0 \\
\textbf{222615} &                  70.0 \\
\textbf{186966} &                   0.0 \\
\textbf{244321} &                  50.0 \\
\textbf{244379} &                  50.0 \\
\textbf{187323} &                 100.0 \\
\textbf{206194} &                  50.0 \\
\textbf{245212} &                 100.0 \\
\textbf{206883} &                   0.0 \\
\textbf{245459} &                  70.0 \\
\end{longtable}
\end{center}
#+end_export


** Gráficos                                                          :ignore:
*** Notas
#+BEGIN_SRC python :results graphics file :file ./figs/monetaristas.png
fig, ax = plt.subplots(1,2, figsize=(8,5), sharey=True)

sns.distplot(df['Resenha Monetaristas'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[0],
             kde_kws={'linewidth': 4, 'shade': True})

ax[0].set_title(f'Nota das resenhas\nTurma {Turma}')
ax[0].text(90, 0.03, f'$\mu = ${df["Resenha Monetaristas"].mean().round(1)/10}', fontsize=12)
ax[0].text(90, 0.027, f'$\sigma = ${df["Resenha Monetaristas"].std().round(1)/10}', fontsize=12)


sns.distplot(df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[1],
             kde_kws={'linewidth': 4, 'shade': True})

ax[1].set_title('Nota das resenhas\n(Exceto não entregues)')
ax[1].text(90, 0.03, f"$\mu = ${df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'].mean().round(1)/10}", fontsize=12)
ax[1].text(90, 0.027, f"$\sigma = ${round(df[df['Resenha Monetaristas']>0]['Resenha Monetaristas'].std())/10}", fontsize=12)
ax[1].set_ylabel('Densidade')

plt.tight_layout()
fig.savefig('./figs/monetaristas.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/monetaristas.png]]


*** Notas e presença

#+BEGIN_SRC python :results graphics file :file ./figs/monetaristas_presenca.png
tmp = df.copy()

tmp["Média presença"] = tmp[["2020-10-19", "2020-10-26"]].mean(axis=1)

resenha = "Monetaristas"

fig, ax = plt.subplots()

sns.regplot(x="Média presença", y=f"Resenha {resenha}", data=tmp, ax=ax, y_jitter=.05);

ax.set_title(f"Nota x Presença\nResenha {resenha} - Turma {Turma}")

fig.savefig('./figs/monetaristas_presenca.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/monetaristas_presenca.png]]


* Novos Clássicos

** Pendências                                                        :ignore:

- [ ] Identificar respostas das questões (forms)
- [ ] Computar notas 
- [ ] Preencher presenhas na tabela da Ana Rosa
** Notas                                                             :ignore:

#+NAME:NovosCla
#+BEGIN_SRC python :results table latex
print('\\begin{center}')
print(
    df[["Resenha Novos Clássicos"]].to_latex(
        caption=f"Notas das resenhas - {Resenhas[1]}",
        bold_rows=True,
        longtable=True,
        na_rep='-',
    ),end='')
print('\end{center}')
#+END_SRC

#+RESULTS: NovosCla
#+begin_export latex
\begin{center}
\begin{longtable}{lr}
\caption{Notas das resenhas - Novos Clássicos}\\
\toprule
{} &  Resenha Novos Clássicos \\
\textbf{RA    } &                          \\
\midrule
\endhead
\midrule
\multicolumn{2}{r}{{Continued on next page}} \\
\midrule
\endfoot

\bottomrule
\endlastfoot
\textbf{212883} &                      5.0 \\
\textbf{212900} &                     10.0 \\
\textbf{231302} &                      5.0 \\
\textbf{231732} &                        - \\
\textbf{213360} &                     10.0 \\
\textbf{231898} &                      5.0 \\
\textbf{213731} &                     10.0 \\
\textbf{232395} &                      7.0 \\
\textbf{232796} &                      5.0 \\
\textbf{233335} &                      5.0 \\
\textbf{233747} &                     10.0 \\
\textbf{255207} &                      0.0 \\
\textbf{216459} &                        - \\
\textbf{235951} &                        - \\
\textbf{236276} &                        - \\
\textbf{218090} &                     10.0 \\
\textbf{255241} &                      7.0 \\
\textbf{237618} &                     10.0 \\
\textbf{199735} &                      0.0 \\
\textbf{218975} &                      5.0 \\
\textbf{238414} &                      0.0 \\
\textbf{219613} &                      5.0 \\
\textbf{219907} &                      7.0 \\
\textbf{239052} &                      7.0 \\
\textbf{220194} &                      5.0 \\
\textbf{201326} &                     10.0 \\
\textbf{156242} &                      5.0 \\
\textbf{240317} &                      5.0 \\
\textbf{240409} &                      7.0 \\
\textbf{221515} &                      5.0 \\
\textbf{255293} &                      0.0 \\
\textbf{241430} &                      5.0 \\
\textbf{222315} &                     10.0 \\
\textbf{184528} &                      0.0 \\
\textbf{222615} &                      3.0 \\
\textbf{186966} &                      0.0 \\
\textbf{244321} &                      5.0 \\
\textbf{244379} &                      5.0 \\
\textbf{187323} &                      7.0 \\
\textbf{206194} &                      5.0 \\
\textbf{245212} &                     10.0 \\
\textbf{206883} &                      3.0 \\
\textbf{245459} &                      5.0 \\
\end{longtable}
\end{center}
#+end_export


** Gráficos                                                          :ignore:
*** Notas   
#+BEGIN_SRC python :results graphics file :file ./figs/novosclassicos.png
fig, ax = plt.subplots(1,2, figsize=(8,5), sharey=True)
sns.distplot(df['Resenha Novos Clássicos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[0],
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(df["Resenha Novos Clássicos"].mean())

sigma = df["Resenha Novos Clássicos"].std().round(1)/10

ax[0].set_title(f'Nota das resenhas\nTurma {Turma}')
ax[0].text(10, 0.5, f'$\mu = ${mu}', fontsize=12)
ax[0].text(10, 0.47, f'$\sigma = ${sigma}', fontsize=12)


sns.distplot(df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[1],
             kde_kws={'linewidth': 4, 'shade': True})

ax[1].set_title('Nota das resenhas\n(Exceto não entregues)')
ax[1].text(10, 0.5, f"$\mu = ${df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'].mean().round(1)}", fontsize=12)
ax[1].text(10, 0.47, f"$\sigma = ${round(df[df['Resenha Novos Clássicos']>0]['Resenha Novos Clássicos'].std())/10}", fontsize=12)
ax[1].set_ylabel('Densidade')

plt.tight_layout()
fig.savefig('./figs/novosclassicos.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novosclassicos.png]]

*** Notas e Presença
#+BEGIN_SRC python :results graphics file :file ./figs/novosclassicos_presenca.png
tmp = df.copy()

tmp["Média presença"] = tmp[["2020-10-19", "2020-10-26", "2020-11-09"]].mean(axis=1)

resenha = "Novos Clássicos"

fig, ax = plt.subplots()

sns.regplot(x="Média presença", y=f"Resenha {resenha}", data=tmp, ax=ax, y_jitter=.05);

ax.set_title(f"Nota x Presença\nResenha {resenha} - Turma {Turma}")

fig.savefig('./figs/novosclassicos_presenca.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novosclassicos_presenca.png]]


** Verificação de plágio por amostragem
*** Sorteio
    
#+BEGIN_SRC python :results output :exports both
pre_selecionados = ["238414"]
alunos = df.shape[0]
sample = 0.3
amostra = round(alunos*sample)
bad_df = df.index.isin(pre_selecionados)
elegivies = df.loc[~bad_df].query('`Resenha Novos Clássicos` > 0')["Resenha Novos Clássicos"].index.tolist()


resultado = np.sort(np.random.choice(
    a = elegivies,
    size = amostra,
    replace = False # Sem repetição
))
resultado = pd.DataFrame(resultado)
resultado.columns = ["RA Sorteados"]
resultado.index = [i + 1 for i in resultado.index]
print(resultado)
resultado
#+END_SRC

#+RESULTS:
#+begin_example
   RA Sorteados
1        156242
2        187323
3        212900
4        219613
5        219907
6        222615
7        231302
8        232796
9        239052
10       240409
11       244321
12       244379
13       245459
#+end_example

*** Resultado Turnitin

#+CAPTION: Resumo relatório de origilidadade
#+NAME:TurnitinNvC
|--------+--------------------|
|     RA | Grau de semelhança |
|--------+--------------------|
| 156242 |                15% |
| 187323 |                20% |
| 212900 |                 1% |
| 219613 |                 0% |
| 219907 |                 8% |
| 222615 |                 0% |
| 231302 |                 2% |
| 232795 |                11% |
| 238414 |                 2% |
| 239052 |                 8% |
| 240409 |                 0% |
| 244321 |                 1% |
| 244379 |                 1% |
| 245459 |                53% |
|--------+--------------------|

**** Gráfico
#+BEGIN_SRC python :var turnitin=TurnitinNvC :results file graphics :file ./figs/turintin_NvC_fig.png
turnitin = pd.DataFrame(
    turnitin[1:],
    columns=["RA", "Grau de Semelhança"],
)
turnitin["Grau de Semelhança"] = [int(grau[:-1])/100 for grau in turnitin["Grau de Semelhança"]]
turnitin.set_index("RA", inplace=True)

fig, ax = plt.subplots(1,1, figsize=(8,5), sharey=True)
sns.distplot(turnitin, hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax,
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(turnitin["Grau de Semelhança"].mean()*100)

sigma = turnitin["Grau de Semelhança"].std().round(1)*100

ax.set_title(f'Checagem de plágio\nTurma {Turma}')
ax.text(-0.15, 10, f'$\mu = ${mu}', fontsize=12)
ax.text(-0.15, 9.5, f'$\sigma = ${sigma}', fontsize=12)

sns.despine()
plt.savefig('./figs/turintin_NvC_fig.png')
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/turintin_NvC_fig.png]]

**** Atualização das notas

#+BEGIN_SRC python
df.loc["245459", "Resenha Novos Clássicos"] = 0.0

df.loc["238414", "Resenha Novos Clássicos"] = 5.0 
#+END_SRC

#+RESULTS:

** Questões

*** Importando respostas                                             :ignore:

#+BEGIN_SRC python
questoes = pd.read_csv(
    './Questoes/MonetaristasNovosClassicos.csv',
    index_col=[0]
)
questoes.columns = ["Q1", "Q2", "Justificativa"]
questoes["Nota_1"] = [int(res=="Falso") for res in questoes["Q1"]]
questoes["Nota_2"] = [int(res=="Falso") for res in questoes["Q2"]]
tmp_idx = pd.Index([i[:16] for i in questoes.index.tolist()])
print(f"Sobreposição das respostas {sum(tmp_idx.duplicated())/len(tmp_idx)}%")
#+END_SRC

#+RESULTS:
: Sobreposição das respostas 0.717948717948718%


*** Importando pacotes e funções

#+BEGIN_SRC python :results graphics file :file ./figs/similarity_forms_1.png
import string
from sklearn.metrics.pairwise import cosine_similarity
from sklearn.feature_extraction.text import CountVectorizer
from nltk.corpus import stopwords
stopwords = stopwords.words('portuguese')

sentences = questoes["Justificativa"]

def clean_string(text):
    text = ''.join([word for word in text if word not in string.punctuation])
    text = text.lower()
    text = ' '.join([word for word in text.split() if word not in stopwords])

    return text

cleaned = list(map(clean_string, sentences))
vectorizer = CountVectorizer().fit_transform(cleaned)
vectors = vectorizer.toarray()
csim = cosine_similarity(vectors)


def coisine_sim_vectors(vec1, vec2):
    vec1 = vec1.reshape(1,-1)
    vec2 = vec2.reshape(1,-1)
    return coisine_similarity(vec1, vec2)[0][0]


plt.matshow(csim);
plt.colorbar()
plt.title(f'Matriz de similaridade das justificativas\n Turma {Turma}\n')
plt.tight_layout()
plt.savefig('./figs/similarity_forms_1.png')
plt.close()

#+END_SRC

#+RESULTS:
[[file:./figs/similarity_forms_1.png]]



#+BEGIN_SRC python :results table latex
triang  = np.triu(csim, k=0).tolist()
subset = [i > 0.7 and i < 1.0 for i in triang[1]]
print(questoes[subset].to_latex())
#+END_SRC

#+RESULTS:
#+begin_export latex
\begin{tabular}{llllrr}
\toprule
{} &     Q1 &     Q2 &                                      Justificativa &  Nota\_1 &  Nota\_2 \\
Carimbo de data/hora         &        &        &                                                    &         &         \\
\midrule
2020/11/09 10:09:49 AM GMT-3 &  Falso &  Falso &  Se os agentes antecipam a expansão monetária, ... &       1 &       1 \\
\bottomrule
\end{tabular}
#+end_export

* Novos Keynesianos

** Pendências                                                        :ignore:

- [ ] Computar notas 
- [ ] Preencher presenhas na tabela da Ana Rosa 
- [ ] Sortear turnitin
** Notas                                                             :ignore:

#+NAME:NovosKey
#+BEGIN_SRC python :results table latex 
print('\\begin{center}')
print(
    df[["Resenha Novos Keynesianos"]].to_latex(
        caption=f"Notas das resenhas - {Resenhas[2]}",
        bold_rows=True,
        longtable=True,
        na_rep='-',
    ),end='')
print('\end{center}')
#+END_SRC

#+RESULTS: NovosKey
#+begin_export latex
\begin{center}
\begin{longtable}{lr}
\caption{Notas das resenhas - Novos Keynesianos}\\
\toprule
{} &  Resenha Novos Keynesianos \\
\textbf{RA    } &                            \\
\midrule
\endhead
\midrule
\multicolumn{2}{r}{{Continued on next page}} \\
\midrule
\endfoot

\bottomrule
\endlastfoot
\textbf{212883} &                        5.0 \\
\textbf{212900} &                        7.0 \\
\textbf{231302} &                        0.0 \\
\textbf{231732} &                          - \\
\textbf{213360} &                        0.0 \\
\textbf{231898} &                        7.0 \\
\textbf{213731} &                        7.0 \\
\textbf{232395} &                        7.0 \\
\textbf{232796} &                        7.0 \\
\textbf{233335} &                        5.0 \\
\textbf{233747} &                        7.0 \\
\textbf{255207} &                        0.0 \\
\textbf{216459} &                          - \\
\textbf{235951} &                          - \\
\textbf{236276} &                          - \\
\textbf{218090} &                       10.0 \\
\textbf{255241} &                        3.0 \\
\textbf{237618} &                       10.0 \\
\textbf{199735} &                        5.0 \\
\textbf{218975} &                        0.0 \\
\textbf{238414} &                        7.0 \\
\textbf{219613} &                        5.0 \\
\textbf{219907} &                       10.0 \\
\textbf{239052} &                        7.0 \\
\textbf{220194} &                        0.0 \\
\textbf{201326} &                       10.0 \\
\textbf{156242} &                        7.0 \\
\textbf{240317} &                        0.0 \\
\textbf{240409} &                        7.0 \\
\textbf{221515} &                        0.0 \\
\textbf{255293} &                        0.0 \\
\textbf{241430} &                        5.0 \\
\textbf{222315} &                        0.0 \\
\textbf{184528} &                        0.0 \\
\textbf{222615} &                        7.0 \\
\textbf{186966} &                        0.0 \\
\textbf{244321} &                        0.0 \\
\textbf{244379} &                        0.0 \\
\textbf{187323} &                        0.0 \\
\textbf{206194} &                        3.0 \\
\textbf{245212} &                        0.0 \\
\textbf{206883} &                        7.0 \\
\textbf{245459} &                        0.0 \\
\end{longtable}
\end{center}
#+end_export

** Gráficos                                                          :ignore:
*** Notas   
#+BEGIN_SRC python :results graphics file :file ./figs/novoskeynesianos.png 
fig, ax = plt.subplots(1,2, figsize=(8,5), sharey=True)
sns.distplot(df['Resenha Novos Keynesianos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[0],
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(df["Resenha Novos Keynesianos"].mean())

sigma = df["Resenha Novos Keynesianos"].std().round(1)/10

ax[0].set_title(f'Nota das resenhas\nTurma {Turma}')
ax[0].text(10, 0.5, f'$\mu = ${mu}', fontsize=12)
ax[0].text(10, 0.47, f'$\sigma = ${sigma}', fontsize=12)


sns.distplot(df[df['Resenha Novos Keynesianos']>0]['Resenha Novos Keynesianos'], hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax[1],
             kde_kws={'linewidth': 4, 'shade': True})

ax[1].set_title('Nota das resenhas\n(Exceto não entregues)')
ax[1].text(10, 0.5, f"$\mu = ${df[df['Resenha Novos Keynesianos']>0]['Resenha Novos Keynesianos'].mean().round(1)}", fontsize=12)
ax[1].text(10, 0.47, f"$\sigma = ${round(df[df['Resenha Novos Keynesianos']>0]['Resenha Novos Keynesianos'].std())/10}", fontsize=12)
ax[1].set_ylabel('Densidade')

plt.tight_layout()
fig.savefig('./figs/novoskeynesianos.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novoskeynesianos.png]]

*** Notas e Presença
#+BEGIN_SRC python :results graphics file :file ./figs/novoskeynesianos_presenca.png 
tmp = df.copy()

tmp["Média presença"] = tmp[["2020-10-19", "2020-10-26", "2020-11-09"]].mean(axis=1)

resenha = "Novos Keynesianos"

fig, ax = plt.subplots()

sns.regplot(x="Média presença", y=f"Resenha {resenha}", data=tmp, ax=ax, y_jitter=.05);

ax.set_title(f"Nota x Presença\nResenha {resenha} - Turma {Turma}")

fig.savefig('./figs/novoskeynesianos_presenca.png')

plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/novoskeynesianos_presenca.png]]



** Verificação de plágio por amostragem
*** Sorteio
    
#+BEGIN_SRC python :results table latex :exports both 
pre_selecionados = ["212883", "231898", "232796", "233335", "206194"]
alunos = df.shape[0]
sample = 0.3
amostra = round(alunos * sample) - len(pre_selecionados)
bad_df = df.index.isin(pre_selecionados)
elegivies = (
    df.loc[~bad_df]
    .query("`Resenha Novos Keynesianos` > 0")["Resenha Novos Keynesianos"]
    .index.tolist()
)

resultado = np.random.choice(a=elegivies, size=amostra, replace=False).tolist()  # Sem repetição
resultado = pre_selecionados + resultado
resultado = np.sort(resultado) 
resultado = pd.DataFrame(resultado)
resultado.columns = ["RA Sorteados"]
resultado.index = [i + 1 for i in resultado.index]
print(resultado.to_latex())
resultado
#+END_SRC

#+RESULTS:
#+begin_export latex
\begin{tabular}{ll}
\toprule
{} & RA Sorteados \\
\midrule
1  &       199735 \\
2  &       206194 \\
3  &       206883 \\
4  &       212883 \\
5  &       212900 \\
6  &       218090 \\
7  &       219613 \\
8  &       231898 \\
9  &       232395 \\
10 &       232796 \\
11 &       233335 \\
12 &       238414 \\
13 &       241430 \\
\bottomrule
\end{tabular}
#+end_export

*** Resultado Turnitin

#+CAPTION: Resumo relatório de origilidadade
#+NAME:TurnitinNvK
|--------+--------------------|
|     RA | Grau de semelhança |
|--------+--------------------|
| 199735 |                 3% |
| 206194 |                 0% |
| 206883 |                 5% |
| 212883 |                21% |
| 212900 |                 0% |
| 218090 |                 7% |
| 219613 |                14% |
| 231898 |                 1% |
| 232395 |                 8% |
| 232796 |                 5% |
| 233335 |                 2% |
| 238414 |                 4% |
| 241430 |                 0% |
|--------+--------------------|
**** Gráfico
#+BEGIN_SRC python :var turnitin=TurnitinNvK :results file graphics :file ./figs/turintin_NvK_fig.png
turnitin = pd.DataFrame(
    turnitin[1:],
    columns=["RA", "Grau de Semelhança"],
)
turnitin["Grau de Semelhança"] = [int(grau[:-1])/100 for grau in turnitin["Grau de Semelhança"]]
turnitin.set_index("RA", inplace=True)

fig, ax = plt.subplots(1,1, figsize=(8,5), sharey=True)
sns.distplot(turnitin, hist=True, kde=True, 
             bins=int(10), color = 'darkblue', 
             hist_kws={'edgecolor':'black'}, ax=ax,
             kde_kws={'linewidth': 4, 'shade': True})
mu = round(turnitin["Grau de Semelhança"].mean()*100)

sigma = turnitin["Grau de Semelhança"].std().round(1)*100

ax.set_title(f'Checagem de plágio\nTurma {Turma}')
ax.text(-0.1, 10, f'$\mu = ${mu}', fontsize=12)
ax.text(-0.1, 9.0, f'$\sigma = ${sigma}', fontsize=12)
ax.axvline(x=0.5, color='black', ls = "-", label="Corte para zerar")
ax.legend()
sns.despine()
plt.savefig('./figs/turintin_NvK_fig.png')
plt.close()
#+END_SRC

#+RESULTS:
[[file:./figs/turintin_NvK_fig.png]]

* Lista de presença e notas
** Lista de chamada com nota das resenhas                            :ignore:
#+NAME:Lista
#+BEGIN_SRC python :results table latex
print('\\begin{center}\\begin{landscape}')
print('\small\n\setlength\LTleft{0pt}\n\setlength\LTright{0pt}')
print(
    df.to_latex(
        caption="Lista de presença e de notas",
        bold_rows=True,
        longtable=True,
        na_rep='-',
        label="lista"
), end='')
print('\end{landscape}\end{center}')
#+END_SRC

#+RESULTS: Lista
#+begin_export latex
\begin{center}\begin{landscape}
\small
\setlength\LTleft{0pt}
\setlength\LTright{0pt}
\begin{longtable}{llrrrrrrrrl}
\caption{Lista de presença e de notas}\label{lista}\\
\toprule
{} &                                  Nome &  Resenha Monetaristas &  2020-10-19 &  2020-10-26 &  2020-11-09 &  Resenha Novos Clássicos &  2020-11-16 &  2020-11-23 &  Resenha Novos Keynesianos &                   Email \\
\textbf{RA    } &                                       &                       &             &             &             &                          &             &             &                            &                         \\
\midrule
\endhead
\midrule
\multicolumn{11}{r}{{Continued on next page}} \\
\midrule
\endfoot

\bottomrule
\endlastfoot
\textbf{212883} &                    ana pasti villalba &                  50.0 &           - &           - &       11.30 &                      5.0 &       36.96 &       16.39 &                        5.0 &  a212883@dac.unicamp.br \\
\textbf{212900} &                     ana paula martins &                  50.0 &        0.00 &        0.00 &       14.78 &                     10.0 &       64.49 &       81.97 &                        7.0 &  a212900@dac.unicamp.br \\
\textbf{231302} &              andré apolinário cardoso &                  70.0 &        0.00 &        0.00 &       94.78 &                      5.0 &        8.70 &       52.46 &                        0.0 &  a231302@dac.unicamp.br \\
\textbf{231732} &             artur preciozo figliolino &                   0.0 &        0.00 &        0.00 &        0.00 &                        - &           - &           - &                          - &  a231732@dac.unicamp.br \\
\textbf{213360} &                    augusto lima alves &                  70.0 &       54.03 &        0.00 &        0.00 &                     10.0 &       84.06 &       48.36 &                        0.0 &  a213360@dac.unicamp.br \\
\textbf{231898} &         beatriz consolmagno de marchi &                  70.0 &        1.61 &        0.00 &       13.04 &                      5.0 &       10.14 &       54.92 &                        7.0 &  b231898@dac.unicamp.br \\
\textbf{213731} &                     bianca senne roma &                  70.0 &       29.03 &       62.64 &       31.30 &                     10.0 &        1.45 &       88.52 &                        7.0 &  b213731@dac.unicamp.br \\
\textbf{232395} &                   bruno bueno de lima &                  30.0 &        0.00 &        0.00 &       12.17 &                      7.0 &           - &        3.28 &                        7.0 &  b232395@dac.unicamp.br \\
\textbf{232796} &          carlos henrique araujo viana &                  70.0 &        4.84 &       14.29 &       18.26 &                      5.0 &        2.90 &       82.79 &                        7.0 &  c232796@dac.unicamp.br \\
\textbf{233335} &                 danielle araujo sousa &                  50.0 &        1.61 &        0.00 &       12.17 &                      5.0 &        3.62 &       18.03 &                        5.0 &  d233335@dac.unicamp.br \\
\textbf{233747} &          eduardo ranieri guedes pinto &                  70.0 &       49.19 &       19.78 &       95.65 &                     10.0 &       22.46 &        5.74 &                        7.0 &  e233747@dac.unicamp.br \\
\textbf{255207} &                  fernanda lima santos &                  50.0 &           - &           - &           - &                      0.0 &           - &           - &                        0.0 &  f255207@dac.unicamp.br \\
\textbf{216459} &            gabriel santana rosmaninho &                   0.0 &        0.00 &        0.00 &        0.00 &                        - &           - &           - &                          - &  g216459@dac.unicamp.br \\
\textbf{235951} &                guilherme garcia gobbo &                  30.0 &        2.42 &        0.00 &        0.00 &                        - &           - &           - &                          - &  g235951@dac.unicamp.br \\
\textbf{236276} &               gustavo henrique biondi &                   0.0 &        0.00 &        1.10 &        0.00 &                        - &           - &           - &                          - &  g236276@dac.unicamp.br \\
\textbf{218090} &            isabela de oliveira garcia &                  70.0 &        1.61 &        0.00 &       93.04 &                     10.0 &       78.99 &       13.11 &                       10.0 &  i218090@dac.unicamp.br \\
\textbf{255241} &             isabella rodrigues soares &                  50.0 &        0.81 &        0.00 &       87.83 &                      7.0 &       68.84 &       59.02 &                        3.0 &  i255241@dac.unicamp.br \\
\textbf{237618} &           joão pedro de paula e silva &                  70.0 &        2.42 &        0.00 &        2.61 &                     10.0 &        2.90 &       58.20 &                       10.0 &  j237618@dac.unicamp.br \\
\textbf{199735} &                    joao pedro gabriel &                  50.0 &       11.29 &        0.00 &       89.57 &                      0.0 &       79.71 &        1.64 &                        5.0 &  j199735@dac.unicamp.br \\
\textbf{218975} &                joão vitor santos melo &                  70.0 &       22.58 &        8.79 &       96.52 &                      5.0 &       69.57 &       86.89 &                        0.0 &  j218975@dac.unicamp.br \\
\textbf{238414} &     juliana florentina fernandes leão &                  70.0 &       16.94 &       40.66 &       19.13 &                      5.0 &       78.26 &        8.20 &                        7.0 &  j238414@dac.unicamp.br \\
\textbf{219613} &  keivan de castro almeida g. de souza &                  50.0 &        6.45 &        0.00 &       15.65 &                      5.0 &           - &           - &                        5.0 &  k219613@dac.unicamp.br \\
\textbf{219907} &           laura maria alves de mattos &                 100.0 &        2.42 &        0.00 &       40.87 &                      7.0 &           - &           - &                       10.0 &  l219907@dac.unicamp.br \\
\textbf{239052} &        lavínia dias de oliveira roman &                  70.0 &       11.29 &        0.00 &       81.74 &                      7.0 &       84.06 &       65.57 &                        7.0 &  l239052@dac.unicamp.br \\
\textbf{220194} &             leonardo tredici de souza &                  70.0 &        0.81 &        1.10 &       54.78 &                      5.0 &       39.13 &        0.00 &                        0.0 &  l220194@dac.unicamp.br \\
\textbf{201326} &               leonardo vitor da silva &                  50.0 &       75.81 &        0.00 &        6.09 &                     10.0 &       84.78 &        4.10 &                       10.0 &  l201326@dac.unicamp.br \\
\textbf{156242} &                 leticia da silva cruz &                   0.0 &           - &           - &       56.52 &                      5.0 &           - &       38.52 &                        7.0 &  l156242@dac.unicamp.br \\
\textbf{240317} &                       luis felipe avi &                  30.0 &           - &       30.77 &        7.83 &                      5.0 &        0.72 &        9.84 &                        0.0 &  l240317@dac.unicamp.br \\
\textbf{240409} &                luísa mendes amstalden &                  70.0 &        5.65 &        0.00 &        8.70 &                      7.0 &        3.62 &        4.10 &                        7.0 &  l240409@dac.unicamp.br \\
\textbf{221515} &        marcos baldez lagoeiro barroso &                  50.0 &        0.81 &        1.10 &       42.61 &                      5.0 &       13.04 &        9.02 &                        0.0 &  m221515@dac.unicamp.br \\
\textbf{255293} &         maria júlia faustino da silva &                  30.0 &           - &           - &        0.00 &                      0.0 &           - &           - &                        0.0 &  m255293@dac.unicamp.br \\
\textbf{241430} &              marina de marco santucci &                  50.0 &        0.00 &       74.73 &       27.83 &                      5.0 &           - &           - &                        5.0 &  m241430@dac.unicamp.br \\
\textbf{222315} &                 matheus oliveira lima &                  50.0 &        0.81 &        0.00 &        7.83 &                     10.0 &        1.45 &       43.44 &                        0.0 &  m222315@dac.unicamp.br \\
\textbf{184528} &       maycon jefferson teodoro bosing &                  50.0 &        0.00 &       71.43 &        0.00 &                      0.0 &           - &           - &                        0.0 &  m184528@dac.unicamp.br \\
\textbf{222615} &     moises aparecido dos santos filho &                  70.0 &        0.00 &        0.00 &       89.57 &                      3.0 &       31.88 &        0.00 &                        7.0 &  m222615@dac.unicamp.br \\
\textbf{186966} &     samuel henrique rezende bernardes &                   0.0 &           - &           - &           - &                      0.0 &           - &           - &                        0.0 &  s186966@dac.unicamp.br \\
\textbf{244321} &         sofia helena de oliveira nery &                  50.0 &        3.23 &        0.00 &       92.17 &                      5.0 &       19.57 &       52.46 &                        0.0 &  s244321@dac.unicamp.br \\
\textbf{244379} &                stefanno felipe bicudo &                  50.0 &        1.61 &        0.00 &       79.13 &                      5.0 &       66.67 &       54.10 &                        0.0 &  s244379@dac.unicamp.br \\
\textbf{187323} &              tatiana marchiori keller &                 100.0 &        0.00 &        0.00 &        7.83 &                      7.0 &           - &        0.82 &                        0.0 &  t187323@dac.unicamp.br \\
\textbf{206194} &       thiago alexandre ramos dos reis &                  50.0 &       46.77 &        1.10 &       93.91 &                      5.0 &       54.35 &        0.00 &                        3.0 &  t206194@dac.unicamp.br \\
\textbf{245212} &          victoria silva torres santos &                 100.0 &           - &           - &           - &                     10.0 &           - &           - &                        0.0 &  v245212@dac.unicamp.br \\
\textbf{206883} &       vinicius santos bering da silva &                   0.0 &       16.94 &        0.00 &       99.13 &                      3.0 &       23.91 &        0.82 &                        7.0 &  v206883@dac.unicamp.br \\
\textbf{245459} &                     vinicius venancio &                  70.0 &        4.84 &        1.10 &       13.91 &                      0.0 &       69.57 &       57.38 &                        0.0 &  v245459@dac.unicamp.br \\
\end{longtable}
\end{landscape}\end{center}
#+end_export


* Seminários
** Sorteio

#+BEGIN_SRC python :results table latex
atas = [f"Ata {i}" for i in np.random.choice(a=[i for i in range(1,num_grupos+1)], size=num_grupos, replace=False)]
grupos = {f"Grupo {i+1}":atas[i] for i in range(num_grupos)}
grupos = pd.DataFrame(grupos, index=[0]).transpose()
grupos.columns=['Resultado']
grupos.index.name='Grupos'
print(grupos.to_latex(caption="Resultado sorteio das atas - Seminários"))
#+END_SRC

#+RESULTS:
#+begin_export latex
\begin{table}
\centering
\caption{Resultado sorteio das atas - Seminários}
\begin{tabular}{ll}
\toprule
{} & Resultado \\
Grupos   &           \\
\midrule
Grupo 1  &     Ata 5 \\
Grupo 2  &    Ata 11 \\
Grupo 3  &     Ata 7 \\
Grupo 4  &    Ata 12 \\
Grupo 5  &     Ata 9 \\
Grupo 6  &     Ata 4 \\
Grupo 7  &    Ata 10 \\
Grupo 8  &     Ata 3 \\
Grupo 9  &     Ata 8 \\
Grupo 10 &     Ata 1 \\
Grupo 11 &     Ata 6 \\
Grupo 12 &     Ata 2 \\
\bottomrule
\end{tabular}
\end{table}
#+end_export



*** TODO Selecionar Atas e criar map para substituir
* Exportando notas                                                 :noexport:

#+BEGIN_SRC python
df.to_csv(f'./output/CE342_{Turma}.csv')
df.to_excel(f'./output/CE342_{Turma}.xlsx')
#+END_SRC

#+RESULTS:

