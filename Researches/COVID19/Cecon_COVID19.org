#+TITLE: Impactos econômicos da COVID-19
#+AUTHOR: Pedro Paulo Zahluth Bastos, Luiz Celso Gomes Jr, Lorena Salces Dourado, Gabriel Petrini, Paulo Robilloti, Antonio Ibarra
#+DATE: September 1st, 2020
#+PROPERTY: header-args python :results output drawer replace :exports results :eval never-export

* Initial setup                                                    :noexport:

#+BEGIN_SRC python :tangle ./codes/setup.py
import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
corona_sp = '2020-03-24'
corona_sp_txt = "Início isolamento social em SP"

corona_60 = '2020-03-18'
corona_60_txt = "Mais de 60 casos de COVID-19"

base = "2014-12-01"


def interpolator(df):
    for col in df:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df = df.resample('D').interpolate(method='time')

    return df

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month

def rebase(df, base=base):
    for col in df:
        df[col] = df[col].apply(lambda x: (100*x)/df[col][base])
    return df

#+END_SRC

#+RESULTS:
:results:
:end:

* Dados Granulares

** Energia

#+BEGIN_SRC python :tangle ./codes/Energia.py


import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)

infos = {
    'Country' : [],
    'Type': [],
    'Usage': [],
    'Source': [],
    'Units' : [],
    'Frequency' : [],
    'Link' : []
        }


def get_energy_links(start=1577833200000, end=1590443159999,  path='../data/'):
    countries = [
        "AT", # Austria
        'DE', # Germany
    ]
    for country in countries:
        url = f"https://www.smard.de/en/downloadcenter/download_market_data/5730#!?downloadAttributes=%7B%22selectedCategory%22:1,%22selectedSubCategory%22:1,%22selectedRegion%22:%22{country}%22,%22from%22:{start},%22to%22:{end},%22selectedFileType%22:%22CSV%22%7D"
        url = url.replace('%22', '"').replace('%7B', '{').replace('%7D', '}')
        print(url)

def ploter(df, country, days=365, units="MWh"):
    fig, ax = plt.subplots(1,2, figsize=(8,5), dpi=300)
    df.plot(ax=ax[0], 
             ls='-', 
             title= f"Energy consumption for {country}\nTotal {units}",
             color='darkred'
            )
    df.pct_change(days).dropna().plot(ax=ax[1], 
             ls='-', 
             title= f"Energy consumption for {country}",
             color='darkred',
             label="Year over Year Growth rate"
            )
    df.pct_change(days).rolling(7).mean().dropna().plot(ax=ax[1], 
             ls='--', 
             label="1 Week Moving average",
             color='black'
            )
    ax[1].legend(labels=("YoY Growth rate", "1 Week Moving average"))
    ax[1].axhline(y=0, ls='--', color='black')
    
    ax2 = plt.axes([0.08,0.12,0.2,0.2])
    ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
    ax2.axis('off')
    ax3 = plt.axes([0.58,0.12,0.2,0.2])
    ax3.imshow(logo, aspect='auto', zorder=0, alpha=.5)
    ax3.axis('off')
    sns.despine()
    plt.tight_layout()
    plt.show()
    fig.savefig(
        f"./figs/Energia/DailyEnergyConsumption_{country}_{units}.svg", 
        dpi = 300, 
        bbox_inches='tight',pad_inches=0
    )
    return fig, ax
#+END_SRC

#+RESULTS:
:results:
:end:


*** Brazil: BRA
**** Energy share
    
#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
share = pd.read_excel(
    './raw/LCA/Consumo_Energia_EPE.xlsx',
    sheet_name='BR', 
    parse_dates=True,
    skiprows=11,
    usecols="A:F",
    index_col=[0],
)
#share = share[:-11] # Until March: Change here
share.index.name=''
share.index = pd.date_range(
    start = share.index[0],
    periods=share.shape[0],
    #end = share.index[-1],
    freq='M', 
)
share = share.apply(lambda x: x/share["TOTAL"]).drop(["TOTAL"], axis='columns')
share.columns = [
    "Comercial",
    "Residential",
    "Industrial",
    "Others"
]

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

share["2019":].plot(
    ax=ax,
    kind='bar',
    stacked=True,
    edgecolor='black',
    lw=2
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), share["2019":].index))


sns.despine()
plt.show()
share["Non-Residential"] = 1- share["Residential"]

#+END_SRC

#+RESULTS:
:results:
:end:

**** Consumo Diário
     
#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
datelist = pd.date_range(
    start = "01/31/2018",
    end = str(dt.today().strftime("%m/%d/%Y")),
    freq='M',
).to_pydatetime().tolist()
datelist = [date.strftime("%Y_%m_%d") for date in datelist] #+ [str(dt.today().strftime("%Y_%m_%d"))]

bra = pd.DataFrame()

for date in datelist:
    url = f"http://sdro.ons.org.br/SDRO/DIARIO/{date}/HTML/07_DadosDiariosAcumulados_Regiao.html"
    bra = bra.append(pd.read_html(
        url,
        parse_dates=True,
        index_col = [0], skiprows=1, header=0, 
        thousands='.', #decimal=','
            )[0])
bra = bra[["Total"]] # TODO Check later: MWmed dia -> MW
bra.columns = ["BRA"]
bra.index = pd.date_range(
    start = bra.index[0],
    end = bra.index[-1],
    freq='D', 
)


energy_bra = bra.merge(share["2018":], left_index=True, right_index=True, how='left', ).fillna(method='ffill', ).fillna(method='bfill')
energy_bra["Daily Industrial"] = energy_bra["BRA"]*energy_bra["Industrial"]
energy_bra["Daily Non-Residential"] = energy_bra["BRA"]*energy_bra["Non-Residential"]
energy_bra["Daily Residential"] = energy_bra["BRA"]*energy_bra["Residential"]

country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
bra["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Energy consumption for {country}\nTotal {units}",
         color='darkred'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1, label='More than 60 COVID19 cases')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
bra.pct_change(days)["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Energy consumption for {country}",
         color='red',
         label="Year over Year Growth rate",
         zorder=-1
        )
bra.pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='--', 
         label="1 Week Moving average",
         color='black'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='gray', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("YoY Growth rate", "1 Week Moving average", 'More than 60 COVID19 cases'))
ax.axhline(y=0, ls='--', color='black')

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)

infos['Country'].append("BRA")
infos["Type"].append('Demand') # Consumption not available
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MWmed")
infos['Frequency'].append('Dailly')
infos['Link'].append(url)


country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
energy_bra[["Daily Industrial"]].rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Industrial Energy consumption for {country}\n1 Week Moving Average",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level_Industrialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
# energy_bra[["Daily Industrial"]].pct_change(days)["2020":].plot(ax=ax, 
#          ls='-', 
#          title= f"Industrial Energy consumption for {country}",
#          color='red',
#          label="Year over Year Growth rate",
#          zorder=-1
#         )
energy_bra[["Daily Industrial"]].pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         label="1 Week Moving average",
         title= f"Industrial Energy consumption for {country}\nYoY growth rate",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("YoY Growth rate\n1 Week Moving average", 'SP social isolation'))
ax.axhline(y=0, ls='-', color='black', lw=.7)

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth_Industrialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
energy_bra[["Daily Non-Residential"]].rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Consumo de energia não residencial\nMédia móvel de uma semana",
         color='red',
         label='Consumo diário'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Início do isolamento social em SP')
ax.legend(labels=("Consumo diário\nSemana Móvel", 'Início do Isolamento social em SP'))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level_Non-Residentialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
# energy_bra[["Daily Non-Residential"]].pct_change(days)["2020":].plot(ax=ax, 
#          ls='-', 
#          title= f"Non-Residential Energy consumption for {country}",
#          color='red',
#          label="Year over Year Growth rate",
#          zorder=-1
#         )
energy_bra[["Daily Non-Residential"]].pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Consumo não-residencial de energia\nTaxa de Crescimento YoY (semana móvel)",
         label="1 Week Moving average",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("Taxa de crescimento YoY\nSemana Móvel", 'Início do Isolamento social em SP'))
ax.axhline(y=0, ls='-', color='black', lw=.7)

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth_Non-Residentialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)

#+END_SRC

#+RESULTS:
:results:
:end:




*** France: FRA

#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
url = 'https://www.data.gouv.fr/en/datasets/r/cfc27ff9-1871-4ee8-be64-b9a290c06935'
fra = pd.read_csv(
    url,
    sep = ';',
    #'../data/Energy/FRA.csv',
    usecols=['Date - Heure', 'Date', 'Heure', 'Consommation brute totale (MW)'],
    index_col=['Date'], 
    parse_dates=True, dayfirst=True, # Check
    #thousands=',' # Check
)
fra = fra.sort_values(by='Date - Heure').drop('Date - Heure', axis='columns')
fra.reset_index(inplace=True)
fra = (fra.groupby(by='Date').mean())
fra = fra[['Consommation brute totale (MW)']]
fra = fra["2020":]#/1000 # Check later
fra = fra.dropna()
fra.columns = ["FRA"]
fra.index.name=''
fra.to_csv('./raw/Energy/FRA.csv')

ploter(
    df=fra, 
    country="France", 
    days = 7,
    units="MW"
)

infos['Country'].append("FRA")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MW")
infos['Frequency'].append('halfhour')
infos['Link'].append(url)

#+END_SRC

#+RESULTS:
:results:
:end:

*** Spain: Spain

*Corrigir*

#+BEGIN_SRC python :eval never :session Energia :tangle ./codes/Energia.py
datelist = pd.date_range(
    start = "01/01/2020",
    end = str((dt.today()- timedelta(days=2)).strftime("%d/%m/%Y")),
    freq='D', 
).to_pydatetime().tolist()

spa = pd.DataFrame()
for day in datelist:
    #url = f'https://demanda.ree.es/visiona/peninsula/demanda/tablas/{day:%Y-%m-%d}/1'
    url = f"https://apidatos.ree.es/es/datos/demanda/demanda-tiempo-real?start_date={day:%Y-%m-%d}T00:00&end_date={(day + timedelta(days=2)):%Y-%m-%d}T01:00&time_trunc=hour"
    response=requests.request(url=url, method='get')
    data=response.json()
    value = pd.DataFrame(
    data['included'][0]['attributes']['values'],
        )
    value = value[['value']].rolling(6).sum()
    value = value[['value']].mean() # Unity: MW
    value = pd.DataFrame({
    'ESP': value,
    'Date': [day.strftime("%Y-%m-%d")]
    },)
    value['Date'] = pd.to_datetime(value['Date'])
    value = value.set_index('Date')
    value.index.name=''
    spa = spa.append(value)
spa.to_csv('./raw/Energy/ESP.csv')

ploter(
    df=spa, 
    country="Spain", 
    days = 7,
    units="MW"
)

infos['Country'].append("ESP")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MW")
infos['Frequency'].append('10 minutes')
infos['Link'].append(url)

#+END_SRC

#+RESULTS:
:results:
5 - 7affede1-0db6-473c-8edf-f88f497af914 <output> <interrupt>
:end:

*** Austria: AUS

#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
aus = pd.read_csv(
    './raw/Energy/AUS.csv', 
    sep=';', 
    index_col=["Date", "Time of day"], 
    parse_dates=True, 
    thousands=',', decimal='.'
)
sources = ['Biomass[MWh]', 'Hydropower[MWh]', 
                       'Wind onshore[MWh]', 'Photovoltaics[MWh]',
                       'Other renewable[MWh]', 'Fossil hard coal[MWh]',
                       'Fossil gas[MWh]', 'Hydro pumped storage[MWh]',
                       'Other conventional[MWh]'
                      ]

#aus[sources] = aus[sources].apply(pd.to_numeric, errors='coerce') 
aus["Total[MWh]"] = aus["Total[MWh]"].str.replace(',', '')
aus["Total[MWh]"] = pd.to_numeric(aus["Total[MWh]"], errors='coerce')
aus["Total[MWh]"] = aus["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#aus["Total[MWh]"] = aus["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
aus = aus.groupby(by='Date', sort=False).mean()
aus = aus[["Total[MWh]"]]
aus.index.name = ''
aus.columns = ["AUS"]
df_ = aus.copy()

infos['Country'].append("AUS")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append("All")
infos['Units'].append("Total[MWh]")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)

ploter(
    df=aus, 
    country="Austria", 
    days = 7,
    units="MWh"
)
#+END_SRC

#+RESULTS:
:results:
:end:

*** Germany: GER

#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
ger = pd.read_csv(
    './raw/Energy/GER.csv', 
    sep=';', 
    index_col=["Date", "Time of day"], 
    parse_dates=True, 
    thousands=',', decimal='.', 
)
sources = ['Biomass[MWh]', 'Hydropower[MWh]', 
                       'Wind onshore[MWh]', 'Photovoltaics[MWh]',
                       'Other renewable[MWh]', 'Fossil hard coal[MWh]',
                       'Fossil gas[MWh]', 'Hydro pumped storage[MWh]',
                       'Other conventional[MWh]'
                      ]

#ger[sources] = ger[sources].apply(pd.to_numeric, errors='coerce') 
ger["Total[MWh]"] = ger["Total[MWh]"].str.replace(',', '')
ger["Total[MWh]"] = pd.to_numeric(ger["Total[MWh]"], errors='coerce')
ger["Total[MWh]"] = ger["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#ger["Total[MWh]"] = ger["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
ger = ger.groupby(by='Date', sort=False).mean()
ger = ger[["Total[MWh]"]]
ger.index.name = ''
ger.columns = ["GER"]

ploter(
    df=ger, 
    country="Germany", 
    days = 7,
    units="MWh"
)

infos['Country'].append("GER")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append("All")
infos['Units'].append("Total[MWh]")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)

#+END_SRC

#+RESULTS:
:results:
:end:

*** Luxemburg: LUX
    
#+BEGIN_SRC python :session Energia :tangle ./codes/Energia.py
lux = pd.read_csv(
    './raw/Energy/LUX.csv', 
    sep=';', 
    index_col=["Date", "Time of day"],  
    thousands=',', decimal='.',
    parse_dates=True
)
lux["Total[MWh]"] = lux["Total[MWh]"].str.replace(',', '')
lux["Total[MWh]"] = pd.to_numeric(lux["Total[MWh]"], errors='coerce')
lux["Total[MWh]"] = lux["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#lux["Total[MWh]"] = lux["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
lux = lux.groupby(by='Date', sort=False).mean()
lux.index.name = ''
lux.columns = ["LUX"]

ploter(
    df=lux, 
    country="Luxembourg", 
    days = 7,
    units="MWh"
)

infos['Country'].append("LUX")
infos["Type"].append('Consumption') # Production not available
infos['Usage'].append(np.nan)
infos['Source'].append(np.nan)
infos['Units'].append("MWh")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)
#+END_SRC

#+RESULTS:
:results:
:end:


** Aruoba-Diebold-Scotti Business Conditions Index

#+BEGIN_SRC python :tangle ./codes/ADS.py
file_path = './raw/USA/'
image_path = './figs/USA/'
corona = '2020-03-18' # More than 60 cases in Brazil
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python :session ADS :tangle ./codes/ADS.py
df = pd.read_excel(
    'https://www.philadelphiafed.org/-/media/research-and-data/real-time-center/business-conditions-index/ads_index_most_current_vintage.xlsx?la=en',
    index_col=[0], parse_dates = True
)

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df["2019-01-01":"2020-08-31"].plot(ax=ax, 
         ls='-', 
         title= "Aruoba-Diebold-Scotti Business Conditions Index",
         color='darkred'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1, label='More than 60 COVID19 cases')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/USA/ADS.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)
#+END_SRC

#+RESULTS:
:results:
:end:

* Confiança, Indicadores de antecedentes e de Risco

** Confiança

#+BEGIN_SRC python :tangle ./codes/Confianca.py

import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Confianca/'
#+END_SRC

#+RESULTS:
:results:
:end:

*** Sondagem Conjuntural Mensal

#+BEGIN_SRC python :tangle ./codes/Confianca.py
file_name = 'Sondagem_Conjuntural_Mensal_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='Com Ajuste CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-'
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''

# Interpolating
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8,5))
df.drop(['NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:

(python3:57604): Gtk-[1;33mWARNING[0m **: [34m18:12:45.030[0m: Theme parsing error: gtk.css:1:117: Failed to import: Erro ao abrir arquivo /home/gpetrini/.local/share/gnome-shell/extensions/unite@hardpixel.eu/styles/buttons-right-always.css: Arquivo ou diretório não encontrado
:end:

*** Sondagens de serviços

#+BEGIN_SRC python :tangle ./codes/Confianca.py
file_name = 'Sondagem_Servicos_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='ICS_dessaz', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = interpolator(df)
fig, ax = plt.subplots(figsize=(8,5))
df.drop(['Índice de Confiança de Serviços (ICS) .1', 'NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


*** Sondagem do comércio

#+BEGIN_SRC python :tangle ./codes/Confianca.py
file_name = 'Sondagem_do_Comercio_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='dessaz CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=11,
    na_values = '-',
)
df.index = pd.date_range( # Check for NaN
    start = '2010-03-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, 
           color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)', )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Sondagem da construção

#+BEGIN_SRC python :tangle ./codes/Confianca.py
file_name = 'Sondagem_Construcao_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='Com ajuste CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.drop(['NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Sondagem industrial CNI

#+BEGIN_SRC python :tangle ./codes/Confianca.py
agregadas = [
    'Total',
    'Ind. Extrativa',
    'Ind. de Transformação'
]
def importer(sheet='Volume Produção', skip_rows=10, initial=1):
    file_name = 'Sondagem_Industrial_CNI'
    df = pd.read_excel(
        file_path + file_name + '.xlsx', 
        sheet_name=sheet, 
        parse_dates=True,
        index_col=[0], 
        skiprows=skip_rows, na_values='-'
    )[initial:][start_year:]
    df.index = pd.to_datetime(df.index, format="%Y-%m")
    df.index.name = ''
    return df

file_name = 'Sondagem_Industrial_CNI'
#+END_SRC

#+RESULTS:
:results:
:end:

**** Volume de produção

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Volume Produção'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Evolução do Emprego

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Evolução Empr'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


**** NUCI

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='NUCI'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** NUCI Efeito-Usual

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='NUCI Efetivo-Usual'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Evolução de estoques

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Evolução Estoques'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Estoques efetivos

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Estoques Efetivos'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Expectativa de Demanda

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Expec Demanda'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Expectativa de Exportação

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Expec Exportação'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Expectativa de compra de matéria-prima


#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Expec Compra Mat. Prima'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Expectativa de emprego

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Expec Emprego'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Expectativa de investimento

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Expec Investimento'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Lucro Operacional


#+BEGIN_SRC python  :tangle ./codes/Confianca.py
agregadas = [
    'Total',
    'Ind. Extrativa',
    'Ind. de Transformação'
]
def importer(sheet='Lucro Operacional', skip_rows=10, initial=1):
    file_name = 'Sondagem_Industrial_CNI'
    df = pd.read_excel(
        file_path + file_name + '.xlsx', 
        sheet_name=sheet, 
        parse_dates=True,
        index_col=[0], 
        skiprows=skip_rows, na_values='-'
    )[initial:]
    df.index = pd.date_range(
    start = '2007-07-31',
    periods=df.shape[0],
    freq='Q', 
    )
    df.index.name = ''
    return df
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Lucro Operacional'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas]["2019-01-01":].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Situação Financeira

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Situação Financeira'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


**** Acesso a Crédito

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
sheet='Acesso Crédito'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** Indicadores de antecedente

*** Composite Leading index ([[https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CLI][CLI]])

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
df = web.DataReader(
    'MEI_CLI', # https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CLI
    'oecd', 
    start='2007-01-01'
)
type = [
    #"Original, seasonally adjusted (GDP)",
    "Amplitude adjusted (CLI)",
    #"Normalised (CLI)",
    #"Normalised (GDP)",
    #"Trend restored (CLI)",
]
df = df.transpose().loc[(
    type[0]
),:]
df = df.reset_index()
df = df[df["Frequency"] == "Monthly"].drop(["Frequency"], axis='columns')
df = df.transpose()
df.columns = cc.convert(names = list(df.loc["Country"]), to = 'ISO3', not_found=None) # To avoid string problems
df.columns.name = ''
df.drop(['Country'], inplace=True)
df.index.name = ''
df.index = pd.date_range(
    start = df.index[0],
    end = f"{str(df.index[-1])[:6]}{int(str(df.index[-1])[6])+1}{str(df.index[-1])[7:]}",
    freq='M', 
)

df.to_csv('./raw/Dados de Confiança/CLI.csv')

cases = ["USA", "ESP", "ITA", "G7", "OECD total "]
source = f"Source: OECD\nLast query: {dt.today():%d/%m/%y}"
df = df['2019':][cases + ["BRA"]]

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))

df['2019':][cases].plot(ax=ax, lw=2)
df['2019':][["BRA"]].plot(ax=ax, lw=3, color='darkred',)
ax.set_title(f"Composite Leading Indicators (MEI)\n{type[0]}", fontweight='bold')
fig.text(0.79, .28, source, ha='left')
ax.axvline(
    x=corona_sp, label=corona_sp_txt,
           ls='--', color='black', lw=1.5, )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.tight_layout()
sns.despine()
plt.show()
#+END_SRC

#+RESULTS:
:results:
:end:


*** Consumer Confidence index ([[https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CCI][CCI]])

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
df = web.DataReader(
    'MEI_CLI', # https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CCI
    'oecd', 
    start='2007-01-01'
)
df = df.transpose().loc[(
    'OECD Standardised CCI, Amplitude adjusted (Long term average=100), sa',
    #"Normalised (CLI)",
    #"Normalised (GDP)",
    #"Trend restored (CLI)",
),:]
df = df.reset_index()
df = df[df["Frequency"] == "Monthly"].drop(["Frequency"], axis='columns')
df = df.transpose()
df.columns = cc.convert(names = list(df.loc["Country"]), to = 'ISO3', not_found=None) # To avoid string problems
df.columns.name = ''
df.drop(['Country'], inplace=True)
df.index.name = ''
df.index = pd.date_range(
    start = df.index[0],
    end = f"{str(df.index[-1])[:6]}{int(str(df.index[-1])[6])+1}{str(df.index[-1])[7:]}",
    freq='M', 
)
df = interpolator(df)
df.to_csv('./raw/Dados de Confiança/CCI.csv')


cases = ["USA", "ESP", "ITA", "G7", "OECD total "]
source = f"Source: OECD\nLast query: {dt.today():%d/%m/%y}"

fig, ax = plt.subplots(figsize=(8,5))

df['2019':][cases].plot(ax=ax, lw=2)
df['2019':][["BRA"]].plot(ax=ax, lw=3, color='darkred',)
ax.set_title("Índice de Confiança do Consumidor (CCI)", fontweight='bold')
fig.text(0.79, .28, source, ha='left')
ax.axvline(x=corona_sp, label=corona_sp_txt,
           ls='--', color='black', lw=1.5, )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.tight_layout()
sns.despine()
plt.show()
#+END_SRC

#+RESULTS:
:results:
Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 421, in _make_request
    six.raise_from(e, None)
  File "<string>", line 3, in raise_from
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 416, in _make_request
    httplib_response = conn.getresponse()
  File "/usr/lib/python3.8/http/client.py", line 1347, in getresponse
    response.begin()
  File "/usr/lib/python3.8/http/client.py", line 307, in begin
    version, status, reason = self._read_status()
  File "/usr/lib/python3.8/http/client.py", line 268, in _read_status
    line = str(self.fp.readline(_MAXLINE + 1), "iso-8859-1")
  File "/usr/lib/python3.8/socket.py", line 669, in readinto
    return self._sock.recv_into(b)
  File "/usr/lib/python3/dist-packages/urllib3/contrib/pyopenssl.py", line 326, in recv_into
    raise timeout("The read operation timed out")
socket.timeout: The read operation timed out

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "/usr/lib/python3/dist-packages/requests/adapters.py", line 439, in send
    resp = conn.urlopen(
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 719, in urlopen
    retries = retries.increment(
  File "/usr/lib/python3/dist-packages/urllib3/util/retry.py", line 400, in increment
    raise six.reraise(type(error), error, _stacktrace)
  File "/usr/lib/python3/dist-packages/six.py", line 703, in reraise
    raise value
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 665, in urlopen
    httplib_response = self._make_request(
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 423, in _make_request
    self._raise_timeout(err=e, url=url, timeout_value=read_timeout)
  File "/usr/lib/python3/dist-packages/urllib3/connectionpool.py", line 330, in _raise_timeout
    raise ReadTimeoutError(
urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host='stats.oecd.org', port=443): Read timed out. (read timeout=30)

During handling of the above exception, another exception occurred:

Traceback (most recent call last):
  File "<stdin>", line 1, in <module>
  File "/tmp/py8JslMY", line 3, in <module>
  File "/tmp/babel-kmcfod/python-qvHd0C", line 1, in <module>
    df = web.DataReader(
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas/util/_decorators.py", line 199, in wrapper
    return func(*args, **kwargs)
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas_datareader/data.py", line 475, in DataReader
    return OECDReader(
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas_datareader/base.py", line 100, in read
    return self._read_one_data(self.url, self.params)
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas_datareader/base.py", line 109, in _read_one_data
    out = self._get_response(url, params=params).json()
  File "/home/gpetrini/.local/lib/python3.8/site-packages/pandas_datareader/base.py", line 155, in _get_response
    response = self.session.get(
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 546, in get
    return self.request('GET', url, **kwargs)
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 533, in request
    resp = self.send(prep, **send_kwargs)
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 668, in send
    history = [resp for resp in gen] if allow_redirects else []
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 668, in <listcomp>
    history = [resp for resp in gen] if allow_redirects else []
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 239, in resolve_redirects
    resp = self.send(
  File "/usr/lib/python3/dist-packages/requests/sessions.py", line 646, in send
    r = adapter.send(request, **kwargs)
  File "/usr/lib/python3/dist-packages/requests/adapters.py", line 529, in send
    raise ReadTimeout(e, request=request)
requests.exceptions.ReadTimeout: HTTPSConnectionPool(host='stats.oecd.org', port=443): Read timed out. (read timeout=30)
>>>
:end:

** Risco
   
*** EMBI+ (JP Morgan)

#+BEGIN_SRC python  :tangle ./codes/Confianca.py
file_name = 'embiplus'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='EMBI', 
    parse_dates=True,
    index_col=[0], 
    skiprows=11,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = df[[
#    "Argentina",
    "Brasil",
    "Europa",
    "Latin",
    "Rússia",
    "China",
    "Coréia do Sul",
]]

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "EMBI+ (JP Morgan)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Incerteza

#+BEGIN_SRC python  :tangle ./codes/Incerteza.py

import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Confianca/'
#+END_SRC

#+RESULTS:
:results:
:end:


*** Indicador de Incerteza (IIE-Br)

#+BEGIN_SRC python  :tangle ./codes/Incerteza.py
file = "IIE-Br_FGV"
df = pd.read_excel(
    f"{file_path + file}.xlsx",
    index_col=[0],
    skiprows=11,
    parse_dates=True
)
df.index.name = ''
df = df["2019-01-01":]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df.plot(
    ax=ax,
    title = "Indicador de Incerteza (IIE-Br)")

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )


#+END_SRC

#+RESULTS:
:results:
:end:


*** Indicador de Confiança Empresarial

#+BEGIN_SRC python  :tangle ./codes/Incerteza.py
file = "ICE_FGV"
df = pd.read_excel(
    f"{file_path + file}.xlsx",
    index_col=[0],
    skiprows=11,
    parse_dates=True,
    sheet_name='Com_ajuste'
)
df.index.name = ''
df = df["2019-01-01":]
df = interpolator(df)
fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df.plot(
    ax=ax,
    title = "Indicador de Confiança Empresaria (ICE-FGV)")

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )


#+END_SRC

#+RESULTS:
:results:
:end:

* Atividade
  
** Crédito

#+BEGIN_SRC python  :tangle ./codes/Credito.py

import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Credito/'
file_name = 'Indicadores_de_Credito_Bacen'
def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#+END_SRC

#+RESULTS:
:results:
:end:

*** Saldo

**** Pessoa jurídica
     
#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.pct_change(12)[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Pessoa física

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoPF"
titulo = "Saldo Pessoa física"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoPF_%PIB"
titulo = "Saldo Pessoa física\nem % PIB"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Crédito ampliado

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado_%PIB"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Crédito direcionado


#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC python  :tangle ./codes/Credito.py
sheet = "SaldoDirecionado_%PIB"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
# df["Total"] = df.sum(axis=1)
# df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:



** IBCBr

#+BEGIN_SRC python   :tangle ./codes/ibcbr.py

import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/IBCBr.xlsx'
image_path = './figs/Antecedente/'

#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/ibcbr.py
df = pd.read_excel(
    file_path,
    sheet_name = "IBC-Br Dessaz",
    skiprows = 11,
#    usecols = "A:B",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''

df = rebase(df)
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Índice de Atividade Econômica do Banco Central\nDessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "IBCBr" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** PIB (Contas Nacionais)

#+BEGIN_SRC python  :tangle ./codes/PIB.py


import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import matplotlib.dates as mdates
import seaborn as sns
import datetime

plt.style.use('seaborn-dark-palette')

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
#+END_SRC

#+RESULTS:
:results:
:end:

#+BEGIN_SRC sh :dir ./raw/ContasNacionais/
wget -N --backups=1 ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
unzip -o Tab_Compl_CNT.zip
mv *.xls Tab_Compl_CNT.xlsx
#+END_SRC

#+RESULTS:
:results:
--2020-12-14 18:17:03--  ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
“.listing”
Resolvendo ftp.ibge.gov.br (ftp.ibge.gov.br)... 170.84.40.44
Conectando-se a ftp.ibge.gov.br (ftp.ibge.gov.br)|170.84.40.44|:21... conectado.
Acessando como anonymous ... Acesso autorizado!
SYST ... feito.    ==> PWD ... feito.
TYPE I ... feito.  ==> CWD (1) /Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas ... feito.
PASV ... feito.    ==> LIST ... feito.
Failed to rename .listing to .listing.1: (2) Arquivo ou diretório não encontrado
]       0  --.-KB/s               .listing                [ <=>                ]     194  --.-KB/s    em 0,001s

2020-12-14 18:17:04 (129 KB/s) - “.listing” salvo [194]

Removeu “.listing”.
O arquivo remoto não é mais novo que o local “Tab_Compl_CNT.zip” -- ignorando.
Archive:  Tab_Compl_CNT.zip
  inflating: Tab_Compl_CNT.xls
:end:

#+BEGIN_SRC python  :tangle ./codes/PIB.py
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "PIB",
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Val encad preços 95 com ajuste', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
#+END_SRC

#+RESULTS:
:results:
:end:

*** Trimestre Contra trimestre imediatamente anterior

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra trimestre anterior'


df['PIB'].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
sns.set_style('white')
fig.savefig('./figs/PIB/PIB.png')
plt.show()

print(df['PIB'].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
2019Q4    0.002203
2020Q1   -0.015459
2020Q2   -0.095998
2020Q3    0.077078
Freq: Q-DEC, Name: PIB, dtype: float64
:end:

**** Agropecuária

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Agropecuaria].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')

plt.suptitle('Agricultura', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/Agropecuaria.png')
plt.show()
#+END_SRC

#+RESULTS:
:results:
:end:

**** Indústria

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Industria].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Indústria', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Industria.png')

print(df[Industria].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
        Industria Extrativa  Industria de Transformacao  Eletricidade e agua  Construcao  Total Industria
2019Q4             0.011824                    0.009037             0.004970   -0.037648         0.000580
2020Q1            -0.024993                   -0.010860             0.002693   -0.017272        -0.008609
2020Q2            -0.003373                   -0.191145            -0.050552   -0.080516        -0.130434
2020Q3             0.025302                    0.236742             0.084899    0.056440         0.147658
:end:


**** Serviços

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Servicos].pct_change().tail(4).plot(kind='bar', ax=ax)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


plt.suptitle('Serviços', color='black', weight = 'bold')

ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Servicos.png')

print(df[Servicos].pct_change())
#+END_SRC

#+RESULTS:
:results:
        Comercio  Transporte, armazenagem e correio  Informacao e comunicacao  ...  Outras atividades  ADM, defesa, etc  Total Servicos
1996Q1       NaN                                NaN                       NaN  ...                NaN               NaN             NaN
1996Q2  0.013911                          -0.022240                  0.015129  ...           0.003483          0.019968        0.006652
1996Q3  0.027924                           0.032960                  0.022244  ...           0.003210          0.005066        0.013433
1996Q4  0.013407                          -0.039419                 -0.001653  ...          -0.005327         -0.005696       -0.020232
1997Q1  0.000391                           0.047790                  0.010417  ...           0.019057         -0.000411        0.019513
...          ...                                ...                       ...  ...                ...               ...             ...
2019Q3  0.005113                           0.004301                  0.009530  ...          -0.003471         -0.006701        0.002394
2019Q4 -0.002298                           0.000091                  0.010576  ...           0.007904          0.007719        0.004045
2020Q1 -0.010817                          -0.019667                 -0.021880  ...          -0.051438         -0.015975       -0.014847
2020Q2 -0.137145                          -0.190152                 -0.031795  ...          -0.168683         -0.069736       -0.094417
2020Q3  0.158514                           0.124804                  0.031199  ...           0.077815          0.025357        0.063183

[99 rows x 8 columns]
:end:

**** Demanda

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Demanda + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Demanda.png')

print(df[Demanda + ['PIB']].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
        Consumo das Familias  Consumo do Governo      FBCF  Exportacao  Importacao       PIB
2019Q4              0.004383           -0.002582 -0.026712    0.016505   -0.047445  0.002203
2020Q1             -0.019767           -0.004895  0.024205   -0.018541   -0.005370 -0.015459
2020Q2             -0.112740           -0.077315 -0.164762    0.015526   -0.124499 -0.095998
2020Q3              0.076406            0.034854  0.110196   -0.021298   -0.095888  0.077078
:end:

**** Oferta


#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Oferta + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Oferta.png')

print(df[Oferta + ['PIB']].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
        Agropecuaria  Total Industria  Total Servicos       PIB
2019Q4     -0.017312         0.000580        0.004045  0.002203
2020Q1      0.028747        -0.008609       -0.014847 -0.015459
2020Q2     -0.001706        -0.130434       -0.094417 -0.095998
2020Q3     -0.004647         0.147658        0.063183  0.077078
:end:


*** Contribuição para variação

**** Demanda
     
#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig = plt.Figure()
ax = plt.gca()
ax2 = fig.add_axes([0.15,0.7,0.2,0.2])

df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(8).plot(
    kind = 'bar', 
    stacked = True, 
    ax = ax,
    color = (
        "tomato",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki"
    ),
    width = 0.75,
    edgecolor='black'
)
plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do PIB', color='black')

ax.text(0.95, -0.3, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.3, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
#ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Contrib_Demanda.png')

print(df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(8))
#+END_SRC

#+RESULTS:
:results:
        Consumo das Familias  Consumo do Governo      FBCF  Exportacao  Importacao
2018Q4              0.001759           -0.002239 -0.000150    0.002336    0.008746
2019Q1              0.007013            0.000322 -0.003797   -0.005622    0.003713
2019Q2              0.002069            0.000217  0.005257   -0.003836   -0.007107
2019Q3              0.003405           -0.000267  0.005346   -0.000924   -0.004419
2019Q4              0.003002           -0.000469 -0.004901    0.002209    0.006893
2020Q1             -0.013568           -0.000884  0.004313   -0.002516    0.000742
2020Q2             -0.077046           -0.014113 -0.030542    0.002101    0.017368
2020Q3              0.051249            0.006494  0.018873   -0.003237    0.012955
:end:

**** Oferta

#+BEGIN_SRC python  :tangle ./codes/PIB.py
fig, ax = plt.subplots(1,1,figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


#df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(8).plot(
    kind = 'bar', 
    stacked = True, 
    ax = ax,
    color = (
        "green",
    #    "darkred",
        "darkslateblue",
        "tan",
    #    "khaki"
    ),
    cmap="Set1",
    width = 0.75,
    edgecolor='black'
)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do valor adicionado', color='black')

ax.text(0.95, -0.3, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.3, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
#ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Contrib_Oferta.png')

print(df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(8))
#+END_SRC

#+RESULTS:
:results:
/home/gpetrini/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/core.py:226: UserWarning: 'color' and 'colormap' cannot be used simultaneously. Using 'color'
  warnings.warn(
/home/gpetrini/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/style.py:27: UserWarning: 'color' and 'colormap' cannot be used simultaneously. Using 'color'
  warnings.warn(
        Agropecuaria  Total Industria  Total Servicos
2018Q4      0.000385        -0.002477        0.000941
2019Q1     -0.001660         0.000468        0.005336
2019Q2      0.000856         0.001882        0.001711
2019Q3      0.001242        -0.000396        0.001705
2019Q4     -0.001377         0.000124        0.002887
2020Q1      0.002233        -0.001832       -0.010575
2020Q2     -0.000139        -0.028106       -0.067661
2020Q3     -0.000416         0.030392        0.045041
:end:

*** Carregamento estatístico


* Setor Externo


** Balanço de Pagamentos

#+BEGIN_SRC python  :tangle ./codes/BP.py

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/SetorExterno/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
:end:


*** Balança comercial

#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_Total_MDIC'
sheet = "Saldo Semanal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
)[0:]
df.drop(['Semana Referência', 'Número dias úteis'], axis='columns', inplace=True)
df.drop('Período', inplace=True)
df.index.name = ''

df.columns = [
    "Exportações",
    "Exportações Média diária",
    "Importações",
    "Importações Média diária",
    "Saldo Comercial",
    "Saldo Comercial Média diária",
]


df.index = pd.date_range( # Check for NaN
    start=df.index[1][:10],
    periods=df.shape[0],
    end=df.index[-1][:10],
    #periods=(1241-12)
    )

df = df[start_year:]

fig, ax = plt.subplots(figsize=(8,5))
df[['Exportações', 'Importações', 'Saldo Comercial']].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_Total_MDIC'
sheet = "Saldo Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    thousands='.'
)[0:]
df = df.apply(pd.to_numeric)
# df.index = pd.date_range(
#     start = '1999-05-01',
#     periods=df.shape[0],
#     #end='2020-05-31',
#     freq='M', 
#     #periods=(1241-12)
#     )
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.drop(['DU'], axis='columns').plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Exportacao_Importacao_FUNCEX'
sheet = "Funcex Dessaz"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


*** Conta corrente (%PIB)

#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Conta_Corrente_pct_PIB_Bacen_BPM6'
sheet = "Conta Corrente"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df.columns = [
    "STC Mensal", "STC últimos 12 meses", "Saldo de Transações Correntes",
    "IED Mensal", "IED últimos 12 meses", "Investimento Externo Direto",
    "NFE Mensal", "NFE últimos 12 meses", "Necessidade Financiamento Externo",
    "PIB últimos 12 meses"
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[[
    "Saldo de Transações Correntes",
    "Investimento Externo Direto",
    "Necessidade Financiamento Externo"
]].plot(
    title = sheet + "\n(em % PIB)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

*** Balança Comercial por país (mensal)

#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Exportações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()

fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='lightgray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Exportações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

**** Importações

#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Importações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()

fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='gray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Importações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


*** Saldo Comercial

#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Saldo Comercial Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()


fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='lightgray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Saldo Comercial Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax.axhline(y=0, ls='-', lw=1, color='black')

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** China

#+BEGIN_SRC python :session China :tangle ./codes/China.py

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/SetorExterno/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python  :session China :tangle ./codes/China.py

file_name = 'China_Banco_dados'
sheet = "Atividade Econômica"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    na_values='-'
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '1994-01-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M'
    )
df = df['2019-01-01':]
df = df.fillna(method='ffill')
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:

(python3:57653): Gtk-[1;33mWARNING[0m **: [34m18:17:44.140[0m: Theme parsing error: gtk.css:1:117: Failed to import: Erro ao abrir arquivo /home/gpetrini/.local/share/gnome-shell/extensions/unite@hardpixel.eu/styles/buttons-right-always.css: Arquivo ou diretório não encontrado
:end:

#+BEGIN_SRC python  :session China :tangle ./codes/China.py

file_name = 'China_Banco_dados'
sheet = "PIB Trimestral Dessaz"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=11,
    na_values='-'
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '1994-01-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='Q'
    )
df = df['2019-01-01':]
df = df.fillna(method='ffill')
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


* Índices de atividade setoriais

#+BEGIN_SRC python  :tangle ./codes/setoriais.py

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/Setoriais/'
start_year = "2019-01-01"
base = "2014-12-01"
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Industrial Mensal (PIM)

#+BEGIN_SRC python  :tangle ./codes/setoriais.py
file_name = "PIM_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Seções Ativi Dessaz",
    skiprows = 11,
    usecols = "A:D",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Industrial Mensal (PIM)\nSeções de atividades desazonalizadas\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Mensal do Comércio (PMC)
   
#+BEGIN_SRC python  :tangle ./codes/setoriais.py
file_name = "PMC_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume Vendas Dessaz",
    skiprows = 11,
    usecols = "A:D,F,G,J:P",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

df.columns = [
    "Comércio Varejista Restrito",
    "Combustíveis e Lubiricantes",
    "Hipermercados, Supermercados, Prod. Alimentícios, Bebidas e Fumo",
    "Tecidos, Vestuário e Calçados",
    "Móveis e Eletrodomésticos",
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
    "Veículos, Motos, Partes e Peças",
    "Material de Construção",
    "Comércio Varejista Ampliado",
]

UsoPessoalDomestico = [
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal do Comércio (PMC)\nVolume de Vendas Dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Pesquisa Mensal de Serviços (PMS)

#+BEGIN_SRC python  :tangle ./codes/setoriais.py
file_name = "PMS_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume dessaz",
    skiprows = 11,
    usecols = "A:C,F,K,N,S",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''

for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)
df.columns = [
    "Total Geral",
    "Serviços prestados às Famílias",
    "Serviços de informação e comunicação",
    "Serviços Profissionais, Administrativos e Complementares",
    "Transportes, Serviços auxiliares aos transportes e Correio",
    "Outros serviços"
]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal de Serviços (PMS)\nÍndice de Volume de serviços dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

* Emprego

#+BEGIN_SRC python   :tangle ./codes/pnad.py

import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/PNAD_Continua.xlsx'
image_path = './figs/Emprego/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
:end:


** Taxa de desocupação

#+BEGIN_SRC python   :tangle ./codes/pnad.py
var = "Taxa de desocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,F",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Desocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Massa de renda

#+BEGIN_SRC python   :tangle ./codes/pnad.py
var = "Massa de renda real efetiva"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,R",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Massa de renda real efetiva",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


** Desalentados e subocupados

#+BEGIN_SRC python   :tangle ./codes/pnad.py
var = "Desalentados_Subocupados"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,S,T",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df.columns = [
    "Força de trabalho",
    "Subocupados",
    "Desalentados"
]
df = df.apply(pd.to_numeric, errors='coerce')
df["Taxa de desalentados"] = df["Desalentados"]/df["Força de trabalho"]
df["Taxa de Subocupados por \ninsuficiência de horas trabalhadas"] = df["Subocupados"]/df["Força de trabalho"]
df = df[start_year:]
df = df[["Taxa de desalentados", "Taxa de Subocupados por \ninsuficiência de horas trabalhadas"]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de desalentados e subocupatos\n(em % da força de trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** Rendimento habitual médio por atividade


#+BEGIN_SRC python   :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal RHM Setor Real",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Rendimento habitual médio por atividade",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "RHM_Setor" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:

** População ocupada por atividade

#+BEGIN_SRC python   :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade",
    ax = ax,
    lw = 1.5,
    edgecolor = 'black',
    kind = 'bar', stacked = True
)



ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:



** Taxa de ocupação

#+BEGIN_SRC python   :tangle ./codes/pnad.py
var = "Taxa de ocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,E",
    parse_date = True,
    index_col = [0]
)

df.index.name = ''
df = df[start_year:]
df.columns = ["Força de trabalho", "População ocupada"]

df[var] = df["População ocupada"]/df["Força de trabalho"]
df = df[[var]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Ocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + "linha" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python   :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:L",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df["Total"])

df.drop(["Total"], axis='columns', inplace=True)
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade\n(% Força de trabalho)",
    ax = ax,
    lw = 1.5,
)

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + "linha" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
:end:
