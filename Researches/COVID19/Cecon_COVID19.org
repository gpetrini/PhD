#+TITLE: Impactos econômicos da COVID-19
#+AUTHOR: Pedro Paulo Zahluth Bastos, Luiz Celso Gomes Jr, Lorena Salces Dourado, Gabriel Petrini, Paulo Robilloti, Antonio Ibarra
#+DATE: September 1st, 2020
#+PROPERTY: header-args :results output drawer :exports results :async t

* Initial setup                                                    :noexport:

#+BEGIN_SRC ipython :tangle ./codes/setup.py
import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
corona_sp = '2020-03-24'
corona_sp_txt = "Início isolamento social em SP"

corona_60 = '2020-03-18'
corona_60_txt = "Mais de 60 casos de COVID-19"

base = "2014-12-01"


def interpolator(df):
    for col in df:
        df[col] = pd.to_numeric(df[col], errors='coerce')
        df = df.resample('D').interpolate(method='time')

    return df

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month

def rebase(df, base=base):
    for col in df:
        df[col] = df[col].apply(lambda x: (100*x)/df[col][base])
    return df

#+END_SRC

#+RESULTS:
:results:
# Out [8]: 
:end:

* Dados Granulares

** Energia

#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
%config InlineBackend.figure_format = 'retina'

import pandas as pd
import numpy as np
from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
from matplotlib.ticker import FuncFormatter

import seaborn as sns
import pandas_datareader.data as web
import requests
import json

import country_converter as coco
cc = coco.CountryConverter()

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)

infos = {
    'Country' : [],
    'Type': [],
    'Usage': [],
    'Source': [],
    'Units' : [],
    'Frequency' : [],
    'Link' : []
        }


def get_energy_links(start=1577833200000, end=1590443159999,  path='../data/'):
    countries = [
        "AT", # Austria
        'DE', # Germany
    ]
    for country in countries:
        url = f"https://www.smard.de/en/downloadcenter/download_market_data/5730#!?downloadAttributes=%7B%22selectedCategory%22:1,%22selectedSubCategory%22:1,%22selectedRegion%22:%22{country}%22,%22from%22:{start},%22to%22:{end},%22selectedFileType%22:%22CSV%22%7D"
        url = url.replace('%22', '"').replace('%7B', '{').replace('%7D', '}')
        print(url)

def ploter(df, country, days=365, units="MWh"):
    fig, ax = plt.subplots(1,2, figsize=(8,5), dpi=300)
    df.plot(ax=ax[0], 
             ls='-', 
             title= f"Energy consumption for {country}\nTotal {units}",
             color='darkred'
            )
    df.pct_change(days).dropna().plot(ax=ax[1], 
             ls='-', 
             title= f"Energy consumption for {country}",
             color='darkred',
             label="Year over Year Growth rate"
            )
    df.pct_change(days).rolling(7).mean().dropna().plot(ax=ax[1], 
             ls='--', 
             label="1 Week Moving average",
             color='black'
            )
    ax[1].legend(labels=("YoY Growth rate", "1 Week Moving average"))
    ax[1].axhline(y=0, ls='--', color='black')
    
    ax2 = plt.axes([0.08,0.12,0.2,0.2])
    ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
    ax2.axis('off')
    ax3 = plt.axes([0.58,0.12,0.2,0.2])
    ax3.imshow(logo, aspect='auto', zorder=0, alpha=.5)
    ax3.axis('off')
    sns.despine()
    plt.tight_layout()
    plt.show()
    fig.savefig(
        f"./figs/Energia/DailyEnergyConsumption_{country}_{units}.svg", 
        dpi = 300, 
        bbox_inches='tight',pad_inches=0
    )
    return fig, ax
#+END_SRC

#+RESULTS:
:results:
# Out [2]: 
# output
/home/gpetrini/.local/lib/python3.8/site-packages/pandas_datareader/compat/__init__.py:7: FutureWarning: pandas.util.testing is deprecated. Use the functions in the public API at pandas.testing instead.
  from pandas.util.testing import assert_frame_equal

:end:


*** Brazil: BRA
**** Energy share
    
#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
share = pd.read_excel(
    './raw/LCA/Consumo_Energia_EPE.xlsx',
    sheet_name='BR', 
    parse_dates=True,
    skiprows=11,
    usecols="A:F",
    index_col=[0],
)
#share = share[:-11] # Until March: Change here
share.index.name=''
share.index = pd.date_range(
    start = share.index[0],
    periods=share.shape[0],
    #end = share.index[-1],
    freq='M', 
)
share = share.apply(lambda x: x/share["TOTAL"]).drop(["TOTAL"], axis='columns')
share.columns = [
    "Comercial",
    "Residential",
    "Industrial",
    "Others"
]

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

share["2019":].plot(
    ax=ax,
    kind='bar',
    stacked=True,
    edgecolor='black',
    lw=2
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), share["2019":].index))


sns.despine()
plt.show()
share["Non-Residential"] = 1- share["Residential"]

#+END_SRC

#+RESULTS:
:results:
# Out [3]: 
# text/plain
: <Figure size 2400x1500 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/b9bb93431770d5b32665b50dc4549f5f948c88a6.png]]
:end:

**** Consumo Diário
     
#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py 
datelist = pd.date_range(
    start = "01/31/2018",
    end = str(dt.today().strftime("%m/%d/%Y")),
    freq='M',
).to_pydatetime().tolist()
datelist = [date.strftime("%Y_%m_%d") for date in datelist] #+ [str(dt.today().strftime("%Y_%m_%d"))]

bra = pd.DataFrame()

for date in datelist:
    url = f"http://sdro.ons.org.br/SDRO/DIARIO/{date}/HTML/07_DadosDiariosAcumulados_Regiao.html"
    bra = bra.append(pd.read_html(
        url,
        parse_dates=True,
        index_col = [0], skiprows=1, header=0, 
        thousands='.', #decimal=','
            )[0])
bra = bra[["Total"]] # TODO Check later: MWmed dia -> MW
bra.columns = ["BRA"]
bra.index = pd.date_range(
    start = bra.index[0],
    end = bra.index[-1],
    freq='D', 
)


energy_bra = bra.merge(share["2018":], left_index=True, right_index=True, how='left', ).fillna(method='ffill', ).fillna(method='bfill')
energy_bra["Daily Industrial"] = energy_bra["BRA"]*energy_bra["Industrial"]
energy_bra["Daily Non-Residential"] = energy_bra["BRA"]*energy_bra["Non-Residential"]
energy_bra["Daily Residential"] = energy_bra["BRA"]*energy_bra["Residential"]

country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
bra["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Energy consumption for {country}\nTotal {units}",
         color='darkred'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1, label='More than 60 COVID19 cases')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
bra.pct_change(days)["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Energy consumption for {country}",
         color='red',
         label="Year over Year Growth rate",
         zorder=-1
        )
bra.pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='--', 
         label="1 Week Moving average",
         color='black'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='gray', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("YoY Growth rate", "1 Week Moving average", 'More than 60 COVID19 cases'))
ax.axhline(y=0, ls='--', color='black')

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)

infos['Country'].append("BRA")
infos["Type"].append('Demand') # Consumption not available
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MWmed")
infos['Frequency'].append('Dailly')
infos['Link'].append(url)


country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
energy_bra[["Daily Industrial"]].rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Industrial Energy consumption for {country}\n1 Week Moving Average",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level_Industrialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
# energy_bra[["Daily Industrial"]].pct_change(days)["2020":].plot(ax=ax, 
#          ls='-', 
#          title= f"Industrial Energy consumption for {country}",
#          color='red',
#          label="Year over Year Growth rate",
#          zorder=-1
#         )
energy_bra[["Daily Industrial"]].pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         label="1 Week Moving average",
         title= f"Industrial Energy consumption for {country}\nYoY growth rate",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("YoY Growth rate\n1 Week Moving average", 'SP social isolation'))
ax.axhline(y=0, ls='-', color='black', lw=.7)

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth_Industrialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


country="Brazil"
units="MWmed"
days=365
fig, ax = plt.subplots(figsize=(8,5), dpi=300)
energy_bra[["Daily Non-Residential"]].rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Consumo de energia não residencial\nMédia móvel de uma semana",
         color='red',
         label='Consumo diário'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Início do isolamento social em SP')
ax.legend(labels=("Consumo diário\nSemana Móvel", 'Início do Isolamento social em SP'))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_level_Non-Residentialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)


fig, ax = plt.subplots(figsize=(8,5), dpi=300)
# energy_bra[["Daily Non-Residential"]].pct_change(days)["2020":].plot(ax=ax, 
#          ls='-', 
#          title= f"Non-Residential Energy consumption for {country}",
#          color='red',
#          label="Year over Year Growth rate",
#          zorder=-1
#         )
energy_bra[["Daily Non-Residential"]].pct_change(days).rolling(7).mean()["2020":].plot(ax=ax, 
         ls='-', 
         title= f"Consumo não-residencial de energia\nTaxa de Crescimento YoY (semana móvel)",
         label="1 Week Moving average",
         color='red'
        )
#ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1.5, label='More than 60 COVID19 cases')
ax.axvline(x = '2020-03-24', color='black', ls='-', lw=1.5, label='Beginning of social isolation in SP')
ax.legend(labels=("Taxa de crescimento YoY\nSemana Móvel", 'Início do Isolamento social em SP'))
ax.axhline(y=0, ls='-', color='black', lw=.7)

ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/Energia/DailyEnergyConsumption_{country}_{units}_growth_Non-Residentialshares.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)

#+END_SRC

#+RESULTS:
:results:
# Out [4]: 
# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/7842ed75178c7e85bc72397985d10bb7c08c16b2.png]]

# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/644bc69ef009a28fef2b58b5d83a478f7e1a78d9.png]]

# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/074f94e05c64e283dd031070baceb58c8aabbe31.png]]

# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/141e7f82711e70af2d2957c58961222b23afedb2.png]]

# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/65596f3f9ad5ba0a8bcb61d9f262ec094485ec1c.png]]

# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/2d14c6fbb2fc52f703f623c27e1b033856529304.png]]
:end:




*** France: FRA

#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
url = 'https://www.data.gouv.fr/en/datasets/r/cfc27ff9-1871-4ee8-be64-b9a290c06935'
fra = pd.read_csv(
    url,
    sep = ';',
    #'../data/Energy/FRA.csv',
    usecols=['Date - Heure', 'Date', 'Heure', 'Consommation brute totale (MW)'],
    index_col=['Date'], 
    parse_dates=True, dayfirst=True, # Check
    #thousands=',' # Check
)
fra = fra.sort_values(by='Date - Heure').drop('Date - Heure', axis='columns')
fra.reset_index(inplace=True)
fra = (fra.groupby(by='Date').mean())
fra = fra[['Consommation brute totale (MW)']]
fra = fra["2020":]#/1000 # Check later
fra = fra.dropna()
fra.columns = ["FRA"]
fra.index.name=''
fra.to_csv('./raw/Energy/FRA.csv')

ploter(
    df=fra, 
    country="France", 
    days = 7,
    units="MW"
)

infos['Country'].append("FRA")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MW")
infos['Frequency'].append('halfhour')
infos['Link'].append(url)

#+END_SRC

#+RESULTS:
:results:
# Out [5]: 
# output
<ipython-input-2-06392b792fc4>:74: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.tight_layout()

# text/plain
: <Figure size 2400x1500 with 4 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/325746abff053090d5f6fe9490ccdb4ba397472d.png]]
:end:

*** Spain: Spain

*Corrigir*

#+BEGIN_SRC ipython :eval never :session Energia :tangle ./codes/Energia.py
datelist = pd.date_range(
    start = "01/01/2020",
    end = str((dt.today()- timedelta(days=2)).strftime("%d/%m/%Y")),
    freq='D', 
).to_pydatetime().tolist()

spa = pd.DataFrame()
for day in datelist:
    #url = f'https://demanda.ree.es/visiona/peninsula/demanda/tablas/{day:%Y-%m-%d}/1'
    url = f"https://apidatos.ree.es/es/datos/demanda/demanda-tiempo-real?start_date={day:%Y-%m-%d}T00:00&end_date={(day + timedelta(days=2)):%Y-%m-%d}T01:00&time_trunc=hour"
    response=requests.request(url=url, method='get')
    data=response.json()
    value = pd.DataFrame(
    data['included'][0]['attributes']['values'],
        )
    value = value[['value']].rolling(6).sum()
    value = value[['value']].mean() # Unity: MW
    value = pd.DataFrame({
    'ESP': value,
    'Date': [day.strftime("%Y-%m-%d")]
    },)
    value['Date'] = pd.to_datetime(value['Date'])
    value = value.set_index('Date')
    value.index.name=''
    spa = spa.append(value)
spa.to_csv('./raw/Energy/ESP.csv')

ploter(
    df=spa, 
    country="Spain", 
    days = 7,
    units="MW"
)

infos['Country'].append("ESP")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append('All')
infos['Units'].append("MW")
infos['Frequency'].append('10 minutes')
infos['Link'].append(url)

#+END_SRC

#+RESULTS:
:results:
5 - 7affede1-0db6-473c-8edf-f88f497af914 <output> <interrupt>
:end:

*** Austria: AUS

#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
aus = pd.read_csv(
    './raw/Energy/AUS.csv', 
    sep=';', 
    index_col=["Date", "Time of day"], 
    parse_dates=True, 
    thousands=',', decimal='.'
)
sources = ['Biomass[MWh]', 'Hydropower[MWh]', 
                       'Wind onshore[MWh]', 'Photovoltaics[MWh]',
                       'Other renewable[MWh]', 'Fossil hard coal[MWh]',
                       'Fossil gas[MWh]', 'Hydro pumped storage[MWh]',
                       'Other conventional[MWh]'
                      ]

#aus[sources] = aus[sources].apply(pd.to_numeric, errors='coerce') 
aus["Total[MWh]"] = aus["Total[MWh]"].str.replace(',', '')
aus["Total[MWh]"] = pd.to_numeric(aus["Total[MWh]"], errors='coerce')
aus["Total[MWh]"] = aus["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#aus["Total[MWh]"] = aus["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
aus = aus.groupby(by='Date', sort=False).mean()
aus = aus[["Total[MWh]"]]
aus.index.name = ''
aus.columns = ["AUS"]
df_ = aus.copy()

infos['Country'].append("AUS")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append("All")
infos['Units'].append("Total[MWh]")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)

ploter(
    df=aus, 
    country="Austria", 
    days = 7,
    units="MWh"
)
#+END_SRC

#+RESULTS:
:results:
# Out [6]: 
# output
<ipython-input-2-06392b792fc4>:74: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.tight_layout()

# text/plain
: (<Figure size 2400x1500 with 4 Axes>,
:  array([<matplotlib.axes._subplots.AxesSubplot object at 0x7f533d4bb130>,
:         <matplotlib.axes._subplots.AxesSubplot object at 0x7f5340dc25e0>],
:        dtype=object))

# text/plain
: <Figure size 2400x1500 with 4 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/9ef112a5872cc34e81a6bb8ef5d1a8c7b5fddf8e.png]]
:end:

*** Germany: GER

#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
ger = pd.read_csv(
    './raw/Energy/GER.csv', 
    sep=';', 
    index_col=["Date", "Time of day"], 
    parse_dates=True, 
    thousands=',', decimal='.', 
)
sources = ['Biomass[MWh]', 'Hydropower[MWh]', 
                       'Wind onshore[MWh]', 'Photovoltaics[MWh]',
                       'Other renewable[MWh]', 'Fossil hard coal[MWh]',
                       'Fossil gas[MWh]', 'Hydro pumped storage[MWh]',
                       'Other conventional[MWh]'
                      ]

#ger[sources] = ger[sources].apply(pd.to_numeric, errors='coerce') 
ger["Total[MWh]"] = ger["Total[MWh]"].str.replace(',', '')
ger["Total[MWh]"] = pd.to_numeric(ger["Total[MWh]"], errors='coerce')
ger["Total[MWh]"] = ger["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#ger["Total[MWh]"] = ger["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
ger = ger.groupby(by='Date', sort=False).mean()
ger = ger[["Total[MWh]"]]
ger.index.name = ''
ger.columns = ["GER"]

ploter(
    df=ger, 
    country="Germany", 
    days = 7,
    units="MWh"
)

infos['Country'].append("GER")
infos["Type"].append('Consumption')
infos['Usage'].append(np.nan)
infos['Source'].append("All")
infos['Units'].append("Total[MWh]")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)

#+END_SRC

#+RESULTS:
:results:
# Out [7]: 
# output
<ipython-input-2-06392b792fc4>:74: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.tight_layout()

# text/plain
: <Figure size 2400x1500 with 4 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/94b114813ade8f5d4312e2e75f5b997a956c4a44.png]]
:end:

*** Luxemburg: LUX
    
#+BEGIN_SRC ipython :session Energia :tangle ./codes/Energia.py
lux = pd.read_csv(
    './raw/Energy/LUX.csv', 
    sep=';', 
    index_col=["Date", "Time of day"],  
    thousands=',', decimal='.',
    parse_dates=True
)
lux["Total[MWh]"] = lux["Total[MWh]"].str.replace(',', '')
lux["Total[MWh]"] = pd.to_numeric(lux["Total[MWh]"], errors='coerce')
lux["Total[MWh]"] = lux["Total[MWh]"]*(4) # TODO Check later: MWh -> MW
#lux["Total[MWh]"] = lux["Total[MWh]"].rolling(4).mean() # TODO Check later: MWhmed
lux = lux.groupby(by='Date', sort=False).mean()
lux.index.name = ''
lux.columns = ["LUX"]

ploter(
    df=lux, 
    country="Luxembourg", 
    days = 7,
    units="MWh"
)

infos['Country'].append("LUX")
infos["Type"].append('Consumption') # Production not available
infos['Usage'].append(np.nan)
infos['Source'].append(np.nan)
infos['Units'].append("MWh")
infos['Frequency'].append('Quarterhour')
infos['Link'].append(np.NaN)
#+END_SRC

#+RESULTS:
:results:
# Out [8]: 
# output
<ipython-input-2-06392b792fc4>:74: UserWarning: This figure includes Axes that are not compatible with tight_layout, so results might be incorrect.
  plt.tight_layout()

# text/plain
: <Figure size 2400x1500 with 4 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/9106e308f42f1f76c029539778f3952a7f562f15.png]]
:end:


** Aruoba-Diebold-Scotti Business Conditions Index

#+BEGIN_SRC ipython :session ADS :tangle ./codes/ADS.py
%config InlineBackend.figure_format = 'retina'

import pandas as pd
import numpy as np

from datetime import datetime as dt
from datetime import timedelta

import matplotlib.pyplot as plt
import matplotlib.ticker as ticker
import matplotlib.image as image
import matplotlib.dates as mdates
import matplotlib.ticker as ticker
import seaborn as sns

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)

file_path = './raw/USA/'
image_path = './figs/USA/'
corona = '2020-03-18' # More than 60 cases in Brazil
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
# Out [5]: 
:end:

#+BEGIN_SRC ipython :session ADS :tangle ./codes/ADS.py
df = pd.read_excel(
    'https://www.philadelphiafed.org/-/media/research-and-data/real-time-center/business-conditions-index/ads_index_most_current_vintage.xlsx?la=en',
    index_col=[0], parse_dates = True
)

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df["2019-01-01":"2020-08-31"].plot(ax=ax, 
         ls='-', 
         title= "Aruoba-Diebold-Scotti Business Conditions Index",
         color='darkred'
        )
ax.axvline(x = '2020-03-18', color='black', ls='-', lw=1, label='More than 60 COVID19 cases')
ax.legend()
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()
fig.savefig(
    f"./figs/USA/ADS.svg", 
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
)
#+END_SRC

#+RESULTS:
:results:
# Out [6]: 
# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/62ce7f05bfc212f03c891e294656997d84c5d3d1.png]]
:end:

* Confiança, Indicadores de antecedentes e de Risco

** Confiança

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Confianca/'
#+END_SRC

#+RESULTS:
:results:
# Out [73]: 
:end:

*** Sondagem Conjuntural Mensal

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
file_name = 'Sondagem_Conjuntural_Mensal_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='Com Ajuste CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-'
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''

# Interpolating
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8,5))
df.drop(['NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [74]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/8a25efae9231056627de37bc9a8ba5ccbde9d524.png]]
:end:

*** Sondagens de serviços

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
file_name = 'Sondagem_Servicos_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='ICS_dessaz', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = interpolator(df)
fig, ax = plt.subplots(figsize=(8,5))
df.drop(['Índice de Confiança de Serviços (ICS) .1', 'NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [75]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/b8884fa0650b2c2def8988d527bbeadc933c5cac.png]]
:end:


*** Sondagem do comércio

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
file_name = 'Sondagem_do_Comercio_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='dessaz CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=11,
    na_values = '-',
)
df.index = pd.date_range( # Check for NaN
    start = '2010-03-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, 
           color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)', )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [76]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/3ff0b698bb29513242319b177af1c0a29f2409fb.png]]
:end:

*** Sondagem da construção

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
file_name = 'Sondagem_Construcao_FGV'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='Com ajuste CNAE 2.0', 
    parse_dates=True,
    index_col=[0], 
    skiprows=10,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.drop(['NUCI'], axis='columns').plot(
    title = file_name.replace('_', ' '),
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [77]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/3457739c82986a176433fecd8d1a1f246d2a7529.png]]
:end:

*** Sondagem industrial CNI

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
agregadas = [
    'Total',
    'Ind. Extrativa',
    'Ind. de Transformação'
]
def importer(sheet='Volume Produção', skip_rows=10, initial=1):
    file_name = 'Sondagem_Industrial_CNI'
    df = pd.read_excel(
        file_path + file_name + '.xlsx', 
        sheet_name=sheet, 
        parse_dates=True,
        index_col=[0], 
        skiprows=skip_rows, na_values='-'
    )[initial:][start_year:]
    df.index = pd.to_datetime(df.index, format="%Y-%m")
    df.index.name = ''
    return df

file_name = 'Sondagem_Industrial_CNI'
#+END_SRC

#+RESULTS:
:results:
# Out [78]: 
:end:

**** Volume de produção

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Volume Produção'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [79]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/190c8feb1adde26683c40b65c19eda8712bdf352.png]]
:end:

**** Evolução do Emprego

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Evolução Empr'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [80]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/433a12bb8c07cd8a313c63f9fd67450df4f145d1.png]]
:end:


**** NUCI

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='NUCI'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [81]: 
# output
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-81-f5ad43e4d316> in <module>
      9     lw = 2.5
     10 )
---> 11 ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
     12 ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
     13 ax2 = plt.axes([0.135,0.135,0.2,0.2])

NameError: name 'corona' is not defined
# text/plain
: <Figure size 576x360 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/4f9cc42543a2d57e44823ebbc3883c2e481fd6ce.png]]
:end:

**** NUCI Efeito-Usual

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='NUCI Efetivo-Usual'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [82]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/ab35061abeddc7db0e957552c2e5902ec47c321e.png]]
:end:

**** Evolução de estoques

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Evolução Estoques'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [83]: 
# output
---------------------------------------------------------------------------
NameError                                 Traceback (most recent call last)
<ipython-input-83-bd6352613dfc> in <module>
      9     lw = 2.5
     10 )
---> 11 ax.axvline(x = corona, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
     12 ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
     13 ax2 = plt.axes([0.135,0.135,0.2,0.2])

NameError: name 'corona' is not defined
# text/plain
: <Figure size 576x360 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/ee2e0ef4d86c219085ca9aa8eb1df02445fc4000.png]]
:end:

**** Estoques efetivos

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Estoques Efetivos'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)


fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [84]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/5af9aa5b5d2d37338f8964e8451506dc7e1e4c53.png]]
:end:

**** Expectativa de Demanda

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Expec Demanda'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [85]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/26cc0738ba131ee757deed5c9a90853d5ee9f94e.png]]
:end:

**** Expectativa de Exportação

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Expec Exportação'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [86]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/fb4b9ac7d589651ae78f9cb61d45452a1c20cffc.png]]
:end:

**** Expectativa de compra de matéria-prima


#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Expec Compra Mat. Prima'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [87]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/1613740d59e200de1ed90cd00658aa98d76fccf5.png]]
:end:

**** Expectativa de emprego

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Expec Emprego'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [88]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/0a3e42b80d0eaee635069c6ee57ed7964c2109a5.png]]
:end:

**** Expectativa de investimento

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Expec Investimento'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [89]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/30862091e2f2a14c212ea33ba93271329494e654.png]]
:end:

**** Lucro Operacional


#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
agregadas = [
    'Total',
    'Ind. Extrativa',
    'Ind. de Transformação'
]
def importer(sheet='Lucro Operacional', skip_rows=10, initial=1):
    file_name = 'Sondagem_Industrial_CNI'
    df = pd.read_excel(
        file_path + file_name + '.xlsx', 
        sheet_name=sheet, 
        parse_dates=True,
        index_col=[0], 
        skiprows=skip_rows, na_values='-'
    )[initial:]
    df.index = pd.date_range(
    start = '2007-07-31',
    periods=df.shape[0],
    freq='Q', 
    )
    df.index.name = ''
    return df
#+END_SRC

#+RESULTS:
:results:
# Out [90]: 
:end:


#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Lucro Operacional'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas]["2019-01-01":].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [91]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/e275139cf83d1eda006dc4b30dbadda64774133a.png]]
:end:

**** Situação Financeira

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Situação Financeira'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [92]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/22bcc5c077b1cb4dcefe2a59c9d0116b7de82c73.png]]
:end:


**** Acesso a Crédito

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
sheet='Acesso Crédito'
df = importer(sheet=sheet, initial=1, skip_rows=11)
df.columns = ['Total' if coluna == "Unnamed: 1" else coluna for coluna in df.columns]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[agregadas].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [93]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/2ded59c6ca4da81dd78c570c38c84f405c7e65b6.png]]
:end:

** Indicadores de antecedente

*** Composite Leading index ([[https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CLI][CLI]])

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
df = web.DataReader(
    'MEI_CLI', # https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CLI
    'oecd', 
    start='2007-01-01'
)
type = [
    #"Original, seasonally adjusted (GDP)",
    "Amplitude adjusted (CLI)",
    #"Normalised (CLI)",
    #"Normalised (GDP)",
    #"Trend restored (CLI)",
]
df = df.transpose().loc[(
    type[0]
),:]
df = df.reset_index()
df = df[df["Frequency"] == "Monthly"].drop(["Frequency"], axis='columns')
df = df.transpose()
df.columns = cc.convert(names = list(df.loc["Country"]), to = 'ISO3', not_found=None) # To avoid string problems
df.columns.name = ''
df.drop(['Country'], inplace=True)
df.index.name = ''
df.index = pd.date_range(
    start = df.index[0],
    end = f"{str(df.index[-1])[:6]}{int(str(df.index[-1])[6])+1}{str(df.index[-1])[7:]}",
    freq='M', 
)

df.to_csv('./raw/Dados de Confiança/CLI.csv')

cases = ["USA", "ESP", "ITA", "G7", "OECD total "]
source = f"Source: OECD\nLast query: {dt.today():%d/%m/%y}"
df = df['2019':][cases + ["BRA"]]

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))

df['2019':][cases].plot(ax=ax, lw=2)
df['2019':][["BRA"]].plot(ax=ax, lw=3, color='darkred',)
ax.set_title(f"Composite Leading Indicators (MEI)\n{type[0]}", fontweight='bold')
fig.text(0.79, .28, source, ha='left')
ax.axvline(
    x=corona_sp, label=corona_sp_txt,
           ls='--', color='black', lw=1.5, )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

plt.tight_layout()
sns.despine()
plt.show()
#+END_SRC

#+RESULTS:
:results:
# Out [94]: 
# output
WARNING:root:OECD + Major Six NME not found in regex
WARNING:root:Major Five Asia not found in regex
WARNING:root:Four Big European not found in regex
WARNING:root:G7 not found in ISO2
WARNING:root:NAFTA not found in regex
WARNING:root:OECD - Total not found in regex
WARNING:root:OECD - Europe not found in regex
WARNING:root:Euro area (19 countries) not found in regex
WARNING:root:OECD total  not found in regex

# text/plain
: <Figure size 576x360 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/4e44c8c8a59b84764b8fc9762999b8d5972932ce.png]]
:end:


*** Consumer Confidence index ([[https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CCI][CCI]])

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
df = web.DataReader(
    'MEI_CLI', # https://stats.oecd.org/Index.aspx?DataSetCode=MEI_CCI
    'oecd', 
    start='2007-01-01'
)
df = df.transpose().loc[(
    'OECD Standardised CCI, Amplitude adjusted (Long term average=100), sa',
    #"Normalised (CLI)",
    #"Normalised (GDP)",
    #"Trend restored (CLI)",
),:]
df = df.reset_index()
df = df[df["Frequency"] == "Monthly"].drop(["Frequency"], axis='columns')
df = df.transpose()
df.columns = cc.convert(names = list(df.loc["Country"]), to = 'ISO3', not_found=None) # To avoid string problems
df.columns.name = ''
df.drop(['Country'], inplace=True)
df.index.name = ''
df.index = pd.date_range(
    start = df.index[0],
    end = f"{str(df.index[-1])[:6]}{int(str(df.index[-1])[6])+1}{str(df.index[-1])[7:]}",
    freq='M', 
)
df = interpolator(df)
df.to_csv('./raw/Dados de Confiança/CCI.csv')


cases = ["USA", "ESP", "ITA", "G7", "OECD total "]
source = f"Source: OECD\nLast query: {dt.today():%d/%m/%y}"

fig, ax = plt.subplots(figsize=(8,5))

df['2019':][cases].plot(ax=ax, lw=2)
df['2019':][["BRA"]].plot(ax=ax, lw=3, color='darkred',)
ax.set_title("Índice de Confiança do Consumidor (CCI)", fontweight='bold')
fig.text(0.79, .28, source, ha='left')
ax.axvline(x=corona_sp, label=corona_sp_txt,
           ls='--', color='black', lw=1.5, )
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
plt.tight_layout()
sns.despine()
plt.show()
#+END_SRC

#+RESULTS:
:results:
# Out [95]: 
# output
/home/gpetrini/.local/lib/python3.8/site-packages/pandas/core/indexing.py:1762: PerformanceWarning: indexing past lexsort depth may impact performance.
  return self._getitem_tuple(key)
WARNING:root:OECD + Major Six NME not found in regex
WARNING:root:Major Five Asia not found in regex
WARNING:root:Four Big European not found in regex
WARNING:root:G7 not found in ISO2
WARNING:root:NAFTA not found in regex
WARNING:root:OECD - Total not found in regex
WARNING:root:OECD - Europe not found in regex
WARNING:root:Euro area (19 countries) not found in regex
WARNING:root:OECD total  not found in regex

# text/plain
: <Figure size 576x360 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/aad38e77e5fe7f43fff63b2c29856f549dc5dc3f.png]]
:end:

** Risco
   
*** EMBI+ (JP Morgan)

#+BEGIN_SRC ipython :session Confianca :tangle ./codes/Confianca.py
file_name = 'embiplus'
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name='EMBI', 
    parse_dates=True,
    index_col=[0], 
    skiprows=11,
    na_values = '-',
)[1:][start_year:]
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df = df[[
#    "Argentina",
    "Brasil",
    "Europa",
    "Latin",
    "Rússia",
    "China",
    "Coréia do Sul",
]]

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "EMBI+ (JP Morgan)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [96]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/8b49720c67f868a07188ddeb0242c5bb3791d599.png]]
:end:


** Incerteza

#+BEGIN_SRC ipython :session Incerteza :tangle ./codes/Incerteza.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Confianca/'
#+END_SRC

#+RESULTS:
:results:
# Out [10]: 
:end:


*** Indicador de Incerteza (IIE-Br)

#+BEGIN_SRC ipython :session Incerteza :tangle ./codes/Incerteza.py
file = "IIE-Br_FGV"
df = pd.read_excel(
    f"{file_path + file}.xlsx",
    index_col=[0],
    skiprows=11,
    parse_dates=True
)
df.index.name = ''
df = df["2019-01-01":]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df.plot(
    ax=ax,
    title = "Indicador de Incerteza (IIE-Br)")

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )


#+END_SRC

#+RESULTS:
:results:
# Out [11]: 
# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/98ebb468eb299bda8f1859499b3331c18b937130.png]]
:end:


*** Indicador de Confiança Empresarial

#+BEGIN_SRC ipython :session Incerteza :tangle ./codes/Incerteza.py
file = "ICE_FGV"
df = pd.read_excel(
    f"{file_path + file}.xlsx",
    index_col=[0],
    skiprows=11,
    parse_dates=True,
    sheet_name='Com_ajuste'
)
df.index.name = ''
df = df["2019-01-01":]
df = interpolator(df)
fig, ax = plt.subplots(figsize=(8,5), dpi=300)

df.plot(
    ax=ax,
    title = "Indicador de Confiança Empresaria (ICE-FGV)")

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início do isolamento em SP\n(24 de março)')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )


#+END_SRC

#+RESULTS:
:results:
# Out [12]: 
# text/plain
: <Figure size 2400x1500 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/925a5b9efaef4a764499db16a51227974403bd49.png]]
:end:

* Atividade
  
** Crédito

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/'
image_path = './figs/Credito/'
file_name = 'Indicadores_de_Credito_Bacen'
def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#+END_SRC

#+RESULTS:
:results:
# Out [34]: 
:end:

*** Saldo

**** Pessoa jurídica
     
#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [35]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/feb0adea384d3519399baabeaaea53ffd62ea8b2.png]]
:end:


#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoPJ"
titulo = "Saldo Pessoa jurídica"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,Z,AM", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.pct_change(12)[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [36]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/814881da38842cb94f0fd6474ddd70e90bd352da.png]]
:end:

**** Pessoa física

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoPF"
titulo = "Saldo Pessoa física"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [37]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/631784503e9693a2f771311b1a337a6f61bd3bcb.png]]
:end:

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoPF_%PIB"
titulo = "Saldo Pessoa física\nem % PIB"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,W,AJ", 
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    lw=2, 
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.2%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [38]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/840ea262d5c525c19284dff3d45594fc372c02d1.png]]
:end:

**** Crédito ampliado

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''


fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [39]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/fc25f4901d8007b52b37c8cc10e4620bc37873f2.png]]
:end:

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado"
titulo = "Saldo Crédito Ampliado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [40]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/d787c0b50fa6cabeff88eb82b75849ce6f26ce84.png]]
:end:


#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoCréditoAmpliado_%PIB"
titulo = "Saldo Crédito Ampliado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,N,V,AJ", 
)[0:]
df.columns = [
    "Setor não financeiro",
    "Governo Geral",
    "Empresas e Famílias"
]
df.index = pd.date_range( # Check for NaN
    start = '2013-01-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
#df["Total"] = df.sum(axis=1)
#df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')

df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.0f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +   '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [41]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/71e2f6f170d1eae4c7e08b6bb69381e2fc6bfa43.png]]
:end:

**** Crédito direcionado


#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=False
unidade="Milhões"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]

df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
#ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [42]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/ce90c1989329de9bd35e54499a49e998a229e167.png]]
:end:

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoDirecionado"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="do Total"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
df["Total"] = df.sum(axis=1)
df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
#ax.axvline(x = corona, color='black', ls='--', lw=1, label='Mais de 60 casos de COVID19')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [43]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/9a2b55ba48387fe773ae71f452b084dae90c5a91.png]]
:end:

#+BEGIN_SRC ipython :session Credito :tangle ./codes/Credito.py
sheet = "SaldoDirecionado_%PIB"
titulo = "Saldo Crédito Direcionado"
porcentagem=True
unidade="PIB"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    usecols="A,D,G,,K,L", 
)[0:]
df.columns = [
    "Rural",
    "Financiamento Imobiliário",
    "BNDES",
    "Outros"
]
df.index = pd.date_range( # Check for NaN
    start = '2007-03-31',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M', 
    #periods=(1241-12)
    )
df = df[start_year:]
# df["Total"] = df.sum(axis=1)
# df = df.apply(lambda x: x/df["Total"]).drop(["Total"], axis='columns')


df.index.name = ''

df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = titulo,
    ax = ax,
    #kind='bar', stacked=True, edgecolor='black',
    lw=2, 
)
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento\nsocial em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
if porcentagem == False:
    ax.set_yticklabels(['{:,.2f}'.format(x) for x in ax.get_yticks()])
    ax.set_ylabel(f'R$ {unidade}')
else: 
    ax.set_yticklabels(['{:,.0%}'.format(x/100) for x in ax.get_yticks()])
    ax.set_ylabel(f'em % {unidade}')
ax2 = plt.axes([.9,0.6,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + sheet.replace(' ', '') + unidade +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [44]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/120b087dfcc6ee8bca3227ec45868b7327bde212.png]]
:end:



** IBCBr

#+BEGIN_SRC ipython  :session ibcbr :tangle ./codes/ibcbr.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *

start_year = "2019-01-01"

file_path = './raw/LCA/IBCBr.xlsx'
image_path = './figs/Antecedente/'

#+END_SRC

#+RESULTS:
:results:
# Out [7]: 
:end:


#+BEGIN_SRC ipython  :session ibcbr :tangle ./codes/ibcbr.py
df = pd.read_excel(
    file_path,
    sheet_name = "IBC-Br Dessaz",
    skiprows = 11,
#    usecols = "A:B",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''

df = rebase(df)
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Índice de Atividade Econômica do Banco Central\nDessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "IBCBr" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [8]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/51df5d2fc00ebe923cd476edd2384c8734922982.png]]
:end:

** PIB (Contas Nacionais)

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
%config InlineBackend.figure_format = 'retina'

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from matplotlib.ticker import FuncFormatter
import matplotlib.dates as mdates
import seaborn as sns
import datetime

plt.style.use('seaborn-dark-palette')

import matplotlib.image as image

logo = "./figs/Cecon_Logo.png"
logo = image.imread(logo)
#+END_SRC

#+RESULTS:
:results:
# Out [31]: 
:end:

#+BEGIN_SRC sh :dir ./raw/ContasNacionais/
wget -N --backups=1 ftp://ftp.ibge.gov.br/Contas_Nacionais/Contas_Nacionais_Trimestrais/Tabelas_Completas/Tab_Compl_CNT.zip
unzip -o Tab_Compl_CNT.zip
mv *.xls Tab_Compl_CNT.xlsx
#+END_SRC

#+RESULTS:
:results:
Archive:  Tab_Compl_CNT.zip
  inflating: Tab_Compl_CNT.xls       
:end:

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
Colunas = [
    "Agropecuaria",
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria",
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
    "VA",
    "PIB",
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Agropecuaria = ['Agropecuaria']

Industria = [
    "Industria Extrativa",
    "Industria de Transformacao",
    "Eletricidade e agua",
    "Construcao",
    "Total Industria"
]

Servicos = [
    "Comercio",
    "Transporte, armazenagem e correio",
    "Informacao e comunicacao",
    "Atividades Financeiras",
    "Atividades Imobiliarias",
    "Outras atividades",
    "ADM, defesa, etc",
    "Total Servicos",
]

Demanda = [
    "Consumo das Familias",
    "Consumo do Governo",
    "FBCF",
    "Exportacao",
    "Importacao"
]

Oferta = [
    'Agropecuaria',
    "Total Industria",
    "Total Servicos",
]

df = pd.read_excel('./raw/ContasNacionais/Tab_Compl_CNT.xlsx', header=3, sheet_name='Val encad preços 95 com ajuste', index_col=0)
df.index = df.index.str.replace('.', 'Q').str.replace('IV', '4').str.replace('III', '3').str.replace('II', '2').str.replace('I', '1')
df.index = pd.PeriodIndex(df.index, freq='Q')
df.columns = Colunas
df["Importacao"] = -df["Importacao"]
#+END_SRC

#+RESULTS:
:results:
# Out [32]: 
:end:

*** Trimestre Contra trimestre imediatamente anterior

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig = plt.figure(figsize=(9,4))
ax = plt.axes()
ax2 = plt.axes([0.15,0.6,0.2,0.2])

suptitle = 'Taxa de crescimento'
title = 'Trimestre contra trimestre anterior'


df['PIB'].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')
ax.axhline(y=0, ls='--', color='black')

plt.suptitle(suptitle, color='black', weight = 'bold')
ax.set_title(title, color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
sns.set_style('white')
fig.savefig('./figs/PIB/PIB.png')
plt.show()

print(df['PIB'].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
# Out [33]: 
# output
2019Q3    0.000588
2019Q4    0.005339
2020Q1   -0.024549
2020Q2   -0.096930
Freq: Q-DEC, Name: PIB, dtype: float64

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/9c59f5df2a1d798fc2f3361d06d39e748802980c.png]]
:end:

**** Agropecuária

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Agropecuaria].pct_change().tail(4).plot(kind='bar', ax=ax, color='darkblue')

plt.suptitle('Agricultura', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

fig.savefig('./figs/PIB/Agropecuaria.png')
plt.show()
#+END_SRC

#+RESULTS:
:results:
# Out [34]: 
# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/8c82528a54963f72680dc80334272720121e728d.png]]
:end:

**** Indústria

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Industria].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Indústria', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Industria.png')

print(df[Industria].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
# Out [35]: 
# output
        Industria Extrativa  Industria de Transformacao  Eletricidade e agua  \
2019Q3             0.126922                   -0.009143            -0.012028   
2019Q4             0.007993                    0.001056            -0.001173   
2020Q1            -0.047379                   -0.019497            -0.003147   
2020Q2            -0.011218                   -0.175394            -0.043949   

        Construcao  Total Industria  
2019Q3    0.007231         0.005460  
2019Q4   -0.030270         0.000602  
2020Q1   -0.033302        -0.008139  
2020Q2   -0.056655        -0.122893  

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/176ed5c24348d0be70e4afbae6f3ebcc4591a5c8.png]]
:end:


**** Serviços

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Servicos].pct_change().tail(4).plot(kind='bar', ax=ax)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


plt.suptitle('Serviços', color='black', weight = 'bold')

ax.axhline(y=0, color='gray', linestyle='--', lw=2)

ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Servicos.png')

print(df[Servicos].pct_change())
#+END_SRC

#+RESULTS:
:results:
# Out [36]: 
# output
        Comercio  Transporte, armazenagem e correio  Informacao e comunicacao  \
1996Q1       NaN                                NaN                       NaN   
1996Q2  0.013930                          -0.022250                  0.014198   
1996Q3  0.027921                           0.032652                  0.041464   
1996Q4  0.013399                          -0.037413                 -0.024424   
1997Q1  0.000426                           0.046895                  0.015430   
...          ...                                ...                       ...   
2019Q2  0.006191                          -0.001205                  0.014362   
2019Q3  0.004430                          -0.001166                  0.008591   
2019Q4 -0.002416                           0.012850                  0.010421   
2020Q1 -0.014039                          -0.024127                 -0.019601   
2020Q2 -0.130136                          -0.193399                 -0.029687   

        Atividades Financeiras  Atividades Imobiliarias  Outras atividades  \
1996Q1                     NaN                      NaN                NaN   
1996Q2                0.001766                 0.006362           0.003576   
1996Q3               -0.000033                 0.009057           0.003184   
1996Q4               -0.087247                -0.024478          -0.005366   
1997Q1                0.110797                 0.022929           0.019185   
...                        ...                      ...                ...   
2019Q2               -0.007478                 0.007306           0.000918   
2019Q3                0.016924                 0.003003          -0.000463   
2019Q4                0.008832                 0.002152           0.008042   
2020Q1                0.002412                 0.003421          -0.053256   
2020Q2                0.008441                 0.004705          -0.198343   

        ADM, defesa, etc  Total Servicos  
1996Q1               NaN             NaN  
1996Q2          0.019224        0.012489  
1996Q3          0.005550        0.014601  
1996Q4         -0.005808       -0.020523  
1997Q1         -0.000785        0.024352  
...                  ...             ...  
2019Q2         -0.005078       -0.000415  
2019Q3         -0.006734        0.001378  
2019Q4          0.010494        0.005582  
2020Q1         -0.014418       -0.022358  
2020Q2         -0.076251       -0.097166  

[98 rows x 8 columns]

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/b36716a8f621c4be345ff6778cf910c669398c18.png]]
:end:

**** Demanda

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Demanda + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Demanda.png')

print(df[Demanda + ['PIB']].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
# Out [37]: 
# output
        Consumo das Familias  Consumo do Governo      FBCF  Exportacao  \
2019Q3              0.005088           -0.003986  0.015347   -0.022088   
2019Q4              0.003992            0.004443 -0.034854    0.023254   
2020Q1             -0.019217            0.002193  0.022937   -0.013177   
2020Q2             -0.125381           -0.088450 -0.154231    0.018445   

        Importacao       PIB  
2019Q3    0.001535  0.000588  
2019Q4   -0.025791  0.005339  
2020Q1    0.008115 -0.024549  
2020Q2   -0.132437 -0.096930  

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/7c327ff8eb33f8d12b7d6afbac964411bee5ec80.png]]
:end:

**** Oferta


#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


df[Oferta + ['PIB']].pct_change().tail(4).plot(kind='bar', ax=ax)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='gray', linestyle='--', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Trimestre contra trimestre anterior', color='black')

ax.text(0.95, -0.2, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.2, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Oferta.png')

print(df[Oferta + ['PIB']].pct_change().tail(4))
#+END_SRC

#+RESULTS:
:results:
# Out [38]: 
# output
        Agropecuaria  Total Industria  Total Servicos       PIB
2019Q3      0.010857         0.005460        0.001378  0.000588
2019Q4     -0.006840         0.000602        0.005582  0.005339
2020Q1      0.005004        -0.008139       -0.022358 -0.024549
2020Q2      0.004292        -0.122893       -0.097166 -0.096930

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/3ca4b1a3528958dfe9791cb732725b96a282c3b3.png]]
:end:


*** Contribuição para variação

**** Demanda
     
#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig = plt.Figure()
ax = plt.gca()
ax2 = fig.add_axes([0.15,0.7,0.2,0.2])

df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(8).plot(
    kind = 'bar', 
    stacked = True, 
    ax = ax,
    color = (
        "tomato",
        "darkred",
        "darkslateblue",
        "tan",
        "khaki"
    ),
    width = 0.75,
    edgecolor='black'
)
plt.suptitle('Demanda', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do PIB', color='black')

ax.text(0.95, -0.3, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.3, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
#ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Contrib_Demanda.png')

print(df[Demanda].diff().apply(lambda x: x/(df["PIB"].shift())).tail(8))
#+END_SRC

#+RESULTS:
:results:
# Out [39]: 
# output
        Consumo das Familias  Consumo do Governo      FBCF  Exportacao  \
2018Q3              0.003670            0.000547  0.008612    0.008489   
2018Q4              0.001643           -0.002391 -0.002606    0.002801   
2019Q1              0.005201            0.001083 -0.001710   -0.005277   
2019Q2              0.002270           -0.000528  0.004948   -0.003653   
2019Q3              0.003469           -0.000725  0.002711   -0.003011   
2019Q4              0.002734            0.000805 -0.006249    0.003098   
2020Q1             -0.013143            0.000397  0.003948   -0.001787   
2020Q2             -0.086221           -0.016445 -0.027837    0.002530   

        Importacao  
2018Q3   -0.009075  
2018Q4    0.005034  
2019Q1    0.003006  
2019Q2   -0.006682  
2019Q3   -0.000221  
2019Q4    0.003713  
2020Q1   -0.001132  
2020Q2    0.019092  

# text/plain
: <Figure size 432x288 with 1 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/e2105790570f9e49e7872b20e975495b01aa9d17.png]]
:end:

**** Oferta

#+BEGIN_SRC ipython :session PIB :tangle ./codes/PIB.py
fig, ax = plt.subplots(1,1,figsize=(9,4))
ax2 = fig.add_axes([0.15,0.6,0.2,0.2])


#df["PIB"].pct_change().tail(12).plot(ax = ax, kind = 'line', legend = True, color = 'black')
df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(8).plot(
    kind = 'bar', 
    stacked = True, 
    ax = ax,
    color = (
        "green",
    #    "darkred",
        "darkslateblue",
        "tan",
    #    "khaki"
    ),
    cmap="Set1",
    width = 0.75,
    edgecolor='black'
)

plt.suptitle('Oferta', color='black', weight = 'bold')
ax.axhline(y=0, color='black', linestyle='-', lw=2)
#ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))


ax.set_title('Contribuição para variação do valor adicionado', color='black')

ax.text(0.95, -0.3, 'Fonte: IBGE',
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

ax.text(0.6, -0.3, 'Atualizado em {}. Último dado disponível: {}'.format(datetime.datetime.now().strftime("%d/%m/%Y"), df.index[-1]),
        verticalalignment='bottom', horizontalalignment='right',
        transform=ax.transAxes,
        color='black', fontsize=10)

#sns.set_style("white")
sns.set_context('paper', font_scale=1.2)
sns.despine()
ax.tick_params(axis='x', colors='black')
ax.tick_params(axis='y', colors='black')
ax.yaxis.label.set_color('black')
ax.xaxis.label.set_color('black')
ax.yaxis.set_major_formatter(FuncFormatter(lambda y, _: '{:.1%}'.format(y))) 
#ax.set_xticklabels(ax.get_xticklabels(), rotation=0)

ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')
plt.show()
fig.savefig('./figs/PIB/Contrib_Oferta.png')

print(df[Oferta].diff().apply(lambda x: x/(df["VA"].shift())).tail(8))
#+END_SRC

#+RESULTS:
:results:
# Out [40]: 
# output
/home/gpetrini/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/core.py:218: UserWarning: 'color' and 'colormap' cannot be used simultaneously. Using 'color'
  warnings.warn(
/home/gpetrini/.local/lib/python3.8/site-packages/pandas/plotting/_matplotlib/style.py:27: UserWarning: 'color' and 'colormap' cannot be used simultaneously. Using 'color'
  warnings.warn(
        Agropecuaria  Total Industria  Total Servicos
2018Q3      0.000785         0.000917        0.003821
2018Q4      0.000366        -0.001947       -0.001539
2019Q1     -0.000803         0.000185        0.006582
2019Q2      0.000890         0.001510       -0.000295
2019Q3      0.000863         0.001174        0.000979
2019Q4     -0.000548         0.000130        0.003963
2020Q1      0.000396        -0.001746       -0.015865
2020Q2      0.000349        -0.026782       -0.069045

# text/plain
: <Figure size 648x288 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/e51f3a05cd7cc553d133062ba14404ab5b055f1a.png]]
:end:

*** Carregamento estatístico


* Setor Externo


** Balanço de Pagamentos

#+BEGIN_SRC ipython :session BP :tangle ./codes/BP.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/SetorExterno/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
# Out [34]: 
:end:


*** Balança comercial

#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_Total_MDIC'
sheet = "Saldo Semanal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
)[0:]
df.drop(['Semana Referência', 'Número dias úteis'], axis='columns', inplace=True)
df.drop('Período', inplace=True)
df.index.name = ''

df.columns = [
    "Exportações",
    "Exportações Média diária",
    "Importações",
    "Importações Média diária",
    "Saldo Comercial",
    "Saldo Comercial Média diária",
]


df.index = pd.date_range( # Check for NaN
    start=df.index[1][:10],
    periods=df.shape[0],
    end=df.index[-1][:10],
    #periods=(1241-12)
    )

df = df[start_year:]

fig, ax = plt.subplots(figsize=(8,5))
df[['Exportações', 'Importações', 'Saldo Comercial']].plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [35]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/1e0d8385dd451046cdb0d2ba3d5177a8c0b66b09.png]]
:end:


#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_Total_MDIC'
sheet = "Saldo Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    thousands='.'
)[0:]
df = df.apply(pd.to_numeric)
# df.index = pd.date_range(
#     start = '1999-05-01',
#     periods=df.shape[0],
#     #end='2020-05-31',
#     freq='M', 
#     #periods=(1241-12)
#     )
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.drop(['DU'], axis='columns').plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [36]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/5c8166f4bad84dd16ebefa571131cb142728daa5.png]]
:end:


#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Exportacao_Importacao_FUNCEX'
sheet = "Funcex Dessaz"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [37]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/0c79e964de2ddd1cb6e026cbcf8475b6f5849d98.png]]
:end:


*** Conta corrente (%PIB)

#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Conta_Corrente_pct_PIB_Bacen_BPM6'
sheet = "Conta Corrente"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df = df[start_year:]
df.index.name = ''
df.columns = [
    "STC Mensal", "STC últimos 12 meses", "Saldo de Transações Correntes",
    "IED Mensal", "IED últimos 12 meses", "Investimento Externo Direto",
    "NFE Mensal", "NFE últimos 12 meses", "Necessidade Financiamento Externo",
    "PIB últimos 12 meses"
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df[[
    "Saldo de Transações Correntes",
    "Investimento Externo Direto",
    "Necessidade Financiamento Externo"
]].plot(
    title = sheet + "\n(em % PIB)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [38]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/1c5d34e0d8ec55b286fb4de024d0b7b11b8bcf58.png]]
:end:

*** Balança Comercial por país (mensal)

#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Exportações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()

fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='lightgray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [39]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/c3ff075133f390045c0fb620ae17d0d8ae93f0b8.png]]
:end:


#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Exportações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [40]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/94e3a318f5fa3b548791774e379fcc93c0ac6151.png]]
:end:

**** Importações

#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Importações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()

fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='gray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [41]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/418cb4f4d4375891918713f399f1fd90e9c5c223.png]]
:end:


#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Importações Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [42]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/5deabc9a2c1ef0035dab475172a88f0cbcbb7efa.png]]
:end:


*** Saldo Comercial

#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Saldo Comercial Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
principais = df.iloc[-1].sort_values(ascending=False).index[:7].to_list()
outros = df.iloc[-1].sort_values(ascending=False).index[7:].to_list()


fig, ax = plt.subplots(figsize=(8,5))
df.iloc[-1].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    color='lightgray',
    edgecolor='black',
    lw=2, 
    zorder=1,
    stacked=False,
    label=f"{df.index[-1]: %b de %Y}",
    alpha=.5
)
df.iloc[-2].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=0,
    color='black',
    stacked=False,
    label=f"{df.index[-2]: %b de %Y}"
)
df.iloc[-3].sort_values(ascending=False).plot(
    title = file_name.replace("_", " ") + "\n" + sheet,
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    zorder=-1,
    color='white',
    stacked=False,
    label=f"{df.index[-3]: %b de %Y}"
)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.7,0.7,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [43]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/45699a516d97feebeb7f7e04293a5e946ff61c4c.png]]
:end:


#+BEGIN_SRC ipython  :session BP :tangle ./codes/BP.py
file_name = 'Balanca_Comercial_por_Pais_Funcex'
sheet = "Saldo Comercial Mensal"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True,
    index_col=[0], 
    skiprows=11, 
    na_values='-' 
)[0:]
df = df.apply(pd.to_numeric)
df.index = pd.to_datetime(df.index, format="%Y-%m")
df.index.name = ''
df["Outros"] = df[outros].sum(axis=1)
df = df[principais + ["Outros"]]

fig, ax = plt.subplots(figsize=(8,5))
df[start_year:].plot(
    title = file_name.replace("_", " ") + "\n" + sheet + "\n Série histórica",
    ax = ax,
    kind='bar', 
    edgecolor='black',
    lw=2, 
    stacked=True,
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax.axhline(y=0, ls='-', lw=1, color='black')

def line_format(label):
    """
    Convert time label to the format of pandas line plot
    """
    month = label.month_name()[:3]
    if month == 'Jan':
        month += f'\n{label.year}'
    return month
ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))
# Define the date format
ax2 = plt.axes([0.7,0.7,0.2,0.2])


ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')


sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + "_SerieHistorica" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [44]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/21bc45cb0da9893e5fef8023e5101cfef69cdbcb.png]]
:end:

** China

#+BEGIN_SRC ipython :session China :tangle ./codes/China.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/SetorExterno/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
# Out [10]: 
:end:


#+BEGIN_SRC ipython  :session China :tangle ./codes/China.py

file_name = 'China_Banco_dados'
sheet = "Atividade Econômica"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=10,
    na_values='-'
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '1994-01-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='M'
    )
df = df['2019-01-01':]
df = df.fillna(method='ffill')
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [11]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/c74b91ccd85342cb8d46bc2adf505f782f53168c.png]]
:end:

#+BEGIN_SRC ipython  :session China :tangle ./codes/China.py

file_name = 'China_Banco_dados'
sheet = "PIB Trimestral Dessaz"
df = pd.read_excel(
    file_path + file_name + '.xlsx', 
    sheet_name=sheet, 
    parse_dates=True, # Check data-parser -> %m/%Y not %m/%d
    index_col=[0], 
    skiprows=11,
    na_values='-'
)[0:]
df.index = pd.date_range( # Check for NaN
    start = '1994-01-01',
    periods=df.shape[0],
    #end='2020-05-31',
    freq='Q'
    )
df = df['2019-01-01':]
df = df.fillna(method='ffill')
df.index.name = ''
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = file_name.replace('_', ' ')+'\n' + sheet,
    ax = ax,
    lw = 2.5
)

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + sheet.replace(' ', '') + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [12]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/c8d7570e3a7e977e5c224522a2254ee152c9b730.png]]
:end:


* Índices de atividade setoriais

#+BEGIN_SRC ipython :session setoriais :tangle ./codes/setoriais.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/'
image_path = './figs/Setoriais/'
start_year = "2019-01-01"
base = "2014-12-01"
#+END_SRC

#+RESULTS:
:results:
# Out [5]: 
:end:


** Pesquisa Industrial Mensal (PIM)

#+BEGIN_SRC ipython :session setoriais :tangle ./codes/setoriais.py
file_name = "PIM_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Seções Ativi Dessaz",
    skiprows = 11,
    usecols = "A:D",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Industrial Mensal (PIM)\nSeções de atividades desazonalizadas\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [6]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/d717735925d5d1c2f0e440c2e6c066139a4df3f4.png]]
:end:


** Pesquisa Mensal do Comércio (PMC)
   
#+BEGIN_SRC ipython :session setoriais :tangle ./codes/setoriais.py
file_name = "PMC_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume Vendas Dessaz",
    skiprows = 11,
    usecols = "A:D,F,G,J:P",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)

df.columns = [
    "Comércio Varejista Restrito",
    "Combustíveis e Lubiricantes",
    "Hipermercados, Supermercados, Prod. Alimentícios, Bebidas e Fumo",
    "Tecidos, Vestuário e Calçados",
    "Móveis e Eletrodomésticos",
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
    "Veículos, Motos, Partes e Peças",
    "Material de Construção",
    "Comércio Varejista Ampliado",
]

UsoPessoalDomestico = [
    "Artigos Farmacêuticos, Médicos, Ortopédicos, de Perfumaria e Cosméticos",
    "Livros, Jornais, Revistas e Papelaria",
    "Equipamentos e Materiais para Escritório, Informática e Comunicação",
    "Outros Artigos de Uso Pessoal e Doméstico",
]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal do Comércio (PMC)\nVolume de Vendas Dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [7]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/b534b097cb3117627d0996f21cbf6e828f0327f9.png]]
:end:


** Pesquisa Mensal de Serviços (PMS)

#+BEGIN_SRC ipython :session setoriais :tangle ./codes/setoriais.py
file_name = "PMS_IBGE"
df = pd.read_excel(
    file_path + file_name + ".xlsx",
    sheet_name = "Volume dessaz",
    skiprows = 11,
    usecols = "A:C,F,K,N,S",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''

for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df[col][base])

df = df[start_year:]
df = interpolator(df)
df.columns = [
    "Total Geral",
    "Serviços prestados às Famílias",
    "Serviços de informação e comunicação",
    "Serviços Profissionais, Administrativos e Complementares",
    "Transportes, Serviços auxiliares aos transportes e Correio",
    "Outros serviços"
]

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = f"Pesquisa Mensal de Serviços (PMS)\nÍndice de Volume de serviços dessazonalizado\n{base} = 100",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_name + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [8]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/d4ec944fdf0da4f21e1332a03a296d7dcb2c7cd7.png]]
:end:

* Emprego

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
%config InlineBackend.figure_format = 'retina'
import sys

sys.path.insert(1, './codes/')

from setup import *


file_path = './raw/LCA/PNAD_Continua.xlsx'
image_path = './figs/Emprego/'
start_year = "2019-01-01"
#+END_SRC

#+RESULTS:
:results:
# Out [9]: 
:end:


** Taxa de desocupação

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
var = "Taxa de desocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,F",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Desocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [10]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/3e66e5d7c90078e7768d9ebdeb4b854b64554dc0.png]]
:end:


** Massa de renda

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
var = "Massa de renda real efetiva"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,R",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''


df = df[start_year:]
df.columns = [
    var
]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Massa de renda real efetiva",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [11]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/12f387dcc997a1e058ff9556ac8d26b3954897ca.png]]
:end:


** Desalentados e subocupados

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
var = "Desalentados_Subocupados"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,S,T",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df.columns = [
    "Força de trabalho",
    "Subocupados",
    "Desalentados"
]
df = df.apply(pd.to_numeric, errors='coerce')
df["Taxa de desalentados"] = df["Desalentados"]/df["Força de trabalho"]
df["Taxa de Subocupados por \ninsuficiência de horas trabalhadas"] = df["Subocupados"]/df["Força de trabalho"]
df = df[start_year:]
df = df[["Taxa de desalentados", "Taxa de Subocupados por \ninsuficiência de horas trabalhadas"]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de desalentados e subocupatos\n(em % da força de trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [12]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/f32bc3ff2934cd6e25217103bf3cc674577be1da.png]]
:end:

** Rendimento habitual médio por atividade


#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal RHM Setor Real",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Rendimento habitual médio por atividade",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label='Início isolamento social em SP')
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "RHM_Setor" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [13]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/7aaad0ee1869882066c6cd4e35e4b0fdd2c933bc.png]]
:end:

** População ocupada por atividade

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:K",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]


fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade",
    ax = ax,
    lw = 1.5,
    edgecolor = 'black',
    kind = 'bar', stacked = True
)



ax.set_xticklabels(map(lambda x: line_format(x), df[start_year:].index))

ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [14]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/18ae86fa0395bd8722bf758ae72aaa47ff7d9d15.png]]
:end:



** Taxa de ocupação

#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
var = "Taxa de ocupação"
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Dessaz",
    skiprows = 11,
    usecols = "A,D,E",
    parse_date = True,
    index_col = [0]
)

df.index.name = ''
df = df[start_year:]
df.columns = ["Força de trabalho", "População ocupada"]

df[var] = df["População ocupada"]/df["Força de trabalho"]
df = df[[var]]
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "Taxa de Ocupação\n(% da Força de Trabalho)",
    ax = ax,
    lw = 2.5
)
ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + var.replace(" ", "_") + "_" + "linha" +  '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [15]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/e57bbb759924a9cb6416ba0e9df75b2ce0d735dd.png]]
:end:


#+BEGIN_SRC ipython  :session pnad :tangle ./codes/pnad.py
df = pd.read_excel(
    file_path,
    sheet_name = "Brasil Mensal PO Setor",
    skiprows = 11,
    usecols = "A:L",
    parse_date = True,
    index_col = [0]
)
df.index.name = ''
df = df[start_year:]
for col in df:
    df[col] = df[col].apply(lambda x: (100*x)/df["Total"])

df.drop(["Total"], axis='columns', inplace=True)
df = interpolator(df)

fig, ax = plt.subplots(figsize=(8,5))
df.plot(
    title = "População ocupada por atividade\n(% Força de trabalho)",
    ax = ax,
    lw = 1.5,
)

ax.axvline(x = corona_sp, color='black', ls='--', lw=1, label=corona_sp_txt)
ax.legend(loc='center left', bbox_to_anchor=(1, 0.5))
ax2 = plt.axes([0.135,0.135,0.2,0.2])
ax2.imshow(logo, aspect='auto', zorder=0, alpha=.5)
ax2.axis('off')

sns.despine()
plt.show()

fig.savefig(
    image_path + file_path.strip("/")[-1] + "PO_Atividade" + "_" + "linha" + '.svg',
    dpi = 300, 
    bbox_inches='tight',pad_inches=0
    )
#+END_SRC

#+RESULTS:
:results:
# Out [16]: 
# text/plain
: <Figure size 576x360 with 2 Axes>

# image/png
[[file:obipy-resources/62e383af79e91b63c7fc98dd7fb55b3c3ececcb9/e61012cac93df689012036ff07e2747e523e77b1.png]]
:end:
