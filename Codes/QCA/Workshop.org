#+OPTIONS: num:nil
#+TITLE: Qualitative Comparative Analysis (QCA) with R - European University Institute
#+AUTHOR: Gabriel Petrini
#+DATE: 2020
#+LANG: en

* LaTeX headers                                         :noexport:ignore:

* HTML headers                                         :noexport:ignore:
  #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
  #+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

  #+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
  #+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
  #+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
  #+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>


* R and python headers                                      :noexport:ignore:

#+PROPERTY: header-args:R  :session QCA :async t :results output :exports both
#+PROPERTY: header-args:ipython  :session QCA :async t :results output :exports both


#+BEGIN_SRC R :results silent
library(QCA)
library(SetsMethods)
library(dplyr)
#+END_SRC



* Supervised Lab sessions

** Loading Data

1. Load IMF dataset


#+BEGIN_SRC ipython :tangle Lab.py :results value
import pandas as pd;

url = "https://www.dropbox.com/sh/xkfv65sh57j2coo/AAByiZOgf8wGnScsNAbW6ffxa/Material/Sample%20data%20and%20R%20scripts/imfraw.csv?dl=1"

df = pd.read_csv(url, sep=";", decimal = ",", index_col=[0]);
df.info()
#+END_SRC

#+RESULTS:
#+begin_export html
# Out [40]: 
# output
<class 'pandas.core.frame.DataFrame'>
Index: 20 entries, AUT1 to SVK
Data columns (total 9 columns):
 #   Column  Non-Null Count  Dtype  
---  ------  --------------  -----  
 0   pos     20 non-null     float64
 1   cr      20 non-null     float64
 2   dc      20 non-null     float64
 3   eff     20 non-null     float64
 4   com     20 non-null     float64
 5   prg     20 non-null     int64  
 6   amb     20 non-null     float64
 7   red     20 non-null     float64
 8   dur     20 non-null     int64  
dtypes: float64(7), int64(2)
memory usage: 1.6+ KB

#+end_export

** Callibration

*** Crisp-sets

Let's calibrate Positive evaluation of cost-saving measures by IMF (POS) as a crisp set (POSCR). We want everything above the crossover point -0.15 to be set membership 1,  and everything below, 0. What would that mean concretely?


#+BEGIN_SRC ipython :tangle Lab.py
df["POS"] = (df["pos"] >= -0.15).astype(int)
df
#+END_SRC

#+RESULTS:
:results:
# Out [3]: 
# text/plain
:       pos      cr    dc   eff   com  prg       amb   red  dur  POS
: case                                                              
: AUT1 -0.9   50.00  54.0  1.89  5.13    0  0.042553   2.0   47    0
: AUT2  1.4   50.00  54.0  1.89  5.14    0  0.010345   0.6   58    1
: BEL   0.1   54.54  63.0  1.59  5.20    0  0.040000   0.4   10    1
: CZE  -2.4   45.45  50.0  1.01  4.52    0  0.062500   3.5   56    0
: DEU  -1.8  100.00  60.0  1.55  5.37    0  0.083333   4.5   54    0
: DNK   0.7  100.00  42.0  2.29  5.46    0  0.037209   1.6   43    1
: ESP  -0.9    0.00  58.0  0.98  4.59    0  0.173684   3.3   19    0
: FIN   0.3  100.00  45.0  2.24  5.47    0  0.024561   1.4   57    1
: FRA  -0.3   88.41  42.0  1.44  5.13    0  0.087500   1.4   16    0
: GBR  -3.7  100.00  49.0  1.56  5.19    0  0.194444  10.5   54    0
: GRC1  0.5   73.73  31.0  0.52  4.04    1  0.192727  10.6   55    1
: GRC2  0.2   73.73  31.0  0.52  3.99    1  0.081481   4.4   54    1
: GRC3  1.4   36.84  31.0  0.52  3.92    1  0.084783   3.9   46    1
: IRL  -1.8   86.28  41.0  1.31  4.74    1  0.602083  28.9   48    0
: ITA1 -0.5  100.00  50.6  0.52  4.37    0  0.080769   2.1   26    0
: ITA2 -1.5  100.00  50.6  0.52  4.37    0  0.153571   4.3   28    0
: ITA3 -1.5  100.00  50.6  0.52  4.43    0  0.166667   4.0   24    0
: PRT1 -1.0    0.00  42.0  1.04  4.38    0  0.207692   2.7   13    0
: PRT2  0.0   66.67  42.0  1.04  4.40    1  0.083871   2.6   31    1
: SVK   0.1    0.00  36.0  0.88  4.19    0  0.063158   1.2   19    1

[[file:/tmp/ob-ipython-htmlmrEwU0.html]]
:end:

In R it would be

~df$POS <- calibrate(imfraw$pos, type = "crisp", thresholds = -0.15, include = TRUE)~

*** Fuzzy set
    
**** Direct method of callibration

Let's calibrate the condition "Highly ambitious program (AMB)" using the thresholds in Table 2. You can see from table 2 that AMB consists of two indicators: 

Required reduction in fiscal balance in per cent (red), divided by duration of program in months (dur) we first combine dur and red to build this variable:


#+BEGIN_SRC ipython :tangle Lab.py :return df
df["AMB"] = df["red"]/df["dur"]
df
#+END_SRC

#+RESULTS:
:results:
# Out [39]: 
# text/plain
:       pos      cr    dc   eff   com  prg       amb   red  dur  POS       AMB
: case                                                                        
: AUT1 -0.9   50.00  54.0  1.89  5.13    0  0.042553   2.0   47    0  0.042553
: AUT2  1.4   50.00  54.0  1.89  5.14    0  0.010345   0.6   58    1  0.010345
: BEL   0.1   54.54  63.0  1.59  5.20    0  0.040000   0.4   10    1  0.040000
: CZE  -2.4   45.45  50.0  1.01  4.52    0  0.062500   3.5   56    0  0.062500
: DEU  -1.8  100.00  60.0  1.55  5.37    0  0.083333   4.5   54    0  0.083333
: DNK   0.7  100.00  42.0  2.29  5.46    0  0.037209   1.6   43    1  0.037209
: ESP  -0.9    0.00  58.0  0.98  4.59    0  0.173684   3.3   19    0  0.173684
: FIN   0.3  100.00  45.0  2.24  5.47    0  0.024561   1.4   57    1  0.024561
: FRA  -0.3   88.41  42.0  1.44  5.13    0  0.087500   1.4   16    0  0.087500
: GBR  -3.7  100.00  49.0  1.56  5.19    0  0.194444  10.5   54    0  0.194444
: GRC1  0.5   73.73  31.0  0.52  4.04    1  0.192727  10.6   55    1  0.192727
: GRC2  0.2   73.73  31.0  0.52  3.99    1  0.081481   4.4   54    1  0.081481
: GRC3  1.4   36.84  31.0  0.52  3.92    1  0.084783   3.9   46    1  0.084783
: IRL  -1.8   86.28  41.0  1.31  4.74    1  0.602083  28.9   48    0  0.602083
: ITA1 -0.5  100.00  50.6  0.52  4.37    0  0.080769   2.1   26    0  0.080769
: ITA2 -1.5  100.00  50.6  0.52  4.37    0  0.153571   4.3   28    0  0.153571
: ITA3 -1.5  100.00  50.6  0.52  4.43    0  0.166667   4.0   24    0  0.166667
: PRT1 -1.0    0.00  42.0  1.04  4.38    0  0.207692   2.7   13    0  0.207692
: PRT2  0.0   66.67  42.0  1.04  4.40    1  0.083871   2.6   31    1  0.083871
: SVK   0.1    0.00  36.0  0.88  4.19    0  0.063158   1.2   19    1  0.063158

[[file:/tmp/ob-ipython-html7GO8Ww.html]]
:end:

now we can calibrate amb. The thresholds in table 2 are 0.01 for "fully out", 0.1205 as a crossover point and	0.20 for fully in

#+BEGIN_SRC R

#+END_SRC

#+RESULTS:
