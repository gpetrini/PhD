#+OPTIONS: num:nil
#+TITLE:  Acessing how rating agencies evaluates developing countries: applying two measure?
#+AUTHOR: Gabriel Petrini
#+LANG: en
#+PROPERTY:header-args R :results output drawer :eval never-export :exports both :session *rating*
#+PROPERTY:header-args python :results output drawer :eval never-export :exports both :session *rating*

* HTML headers :noexport:ignore:
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/htmlize.css"/>
#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="http://www.pirilampo.org/styles/readtheorg/css/readtheorg.css"/>

#+HTML_HEAD: <script src="https://ajax.googleapis.com/ajax/libs/jquery/2.1.3/jquery.min.js"></script>
#+HTML_HEAD: <script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.4/js/bootstrap.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/lib/js/jquery.stickytableheaders.min.js"></script>
#+HTML_HEAD: <script type="text/javascript" src="http://www.pirilampo.org/styles/readtheorg/js/readtheorg.js"></script>


* General TODOs


** TODO Check panel QCA

** TODO Calibrate

*** WAIT Valores relativos em rela√ß√£o aos melhores avaliados ou diferen√ßa de ano a outro?
- Ambos?
- Em rela√ß√£o ao investment grade?
- Vantagem do relativo √© que inclui a situa√ß√£o econ√¥mica do ano (exemplo: crise)

* Packages and global variables

#+begin_src R :exports code
library(tidyverse)
library(tidygeocoder)
library(data.table)
library(FactoMineR)
library(factoextra)

emacs <- TRUE
#+end_src

#+RESULTS:
:results:
‚îÄ‚îÄ [1mAttaching packages[22m ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.0 ‚îÄ‚îÄ
[32m‚úî[39m [34mggplot2[39m 3.3.3     [32m‚úî[39m [34mpurrr  [39m 0.3.4
[32m‚úî[39m [34mtibble [39m 3.0.6     [32m‚úî[39m [34mdplyr  [39m 1.0.4
[32m‚úî[39m [34mtidyr  [39m 1.1.2     [32m‚úî[39m [34mstringr[39m 1.4.0
[32m‚úî[39m [34mreadr  [39m 1.4.0     [32m‚úî[39m [34mforcats[39m 0.5.1
‚îÄ‚îÄ [1mConflicts[22m ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ
[31m‚úñ[39m [34mdplyr[39m::[32mfilter()[39m masks [34mstats[39m::filter()
[31m‚úñ[39m [34mdplyr[39m::[32mlag()[39m    masks [34mstats[39m::lag()
data.table 1.13.6 using 2 threads (see ?getDTthreads).  Latest news: r-datatable.com

Attaching package: ‚Äòdata.table‚Äô

The following objects are masked from ‚Äòpackage:dplyr‚Äô:

    between, first, last

The following object is masked from ‚Äòpackage:purrr‚Äô:

    transpose
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
:end:


#+begin_src python
import pandas as pd
import numpy as np

import country_converter as coco

converter = coco.CountryConverter()

developing = converter.data["ISO3"][np.isnan(converter.data["OECD"])].to_list()
oecd = converter.data["ISO3"][~np.isnan(converter.data["OECD"])].to_list()
#+end_src

#+RESULTS:
:results:
:end:

* Loading Index of Economic Freedom (IEF)

** How to get IEF dataset (=ief.csv=)

- Go to this [[https://www.heritage.org/index/explore][link]]
- Select Regions (do not select "All")
- Select all years ("All" option)


** Importing to R

#+begin_src R
df <- data.table::fread(
                    './data/ief.csv',
                    na.strings = "N/A"
                    ) %>%
  mutate(Name = countrycode::countrycode(
                              Name,
                              origin ='country.name',
                              destination ='iso3c',
                              warn = FALSE)) %>%
  rename(ISO = Name, Year = `Index Year`) %>%
  arrange(ISO, Year) %>%
  drop_na(ISO) %>%
  mutate(ISO = factor(ISO))
#+end_src

#+RESULTS:
:results:
:end:


** Aggregating concepts



This aggregates concepts are the one defined in the IEF main webpage.
Here, we will define this variables as the mean of the individual ones.
The website does not specify how to calculate them, but it looks like it is the row wise mean.

#+CAPTION: Aggregates IEF variables
#+NAME: agg
|------------------------+---------------------+-----------------------+--------------------|
| Rule of Law            | Government Size     | Regulatory Efficiency | Open Markets       |
|------------------------+---------------------+-----------------------+--------------------|
| Property Rights        | Tax Burden          | Business Freedom      | Trade Freedom      |
| Judicial Effectiveness | Government Spending | Labor Freedom         | Investment Freedom |
| Government Integrity   | Fiscal Health       | Monetary Freedom      | Financial Freedom  |
|------------------------+---------------------+-----------------------+--------------------|


#+begin_src R :var agg = agg

if(emacs){ # Replace VNs by its columns nates
  names(agg) <- as.matrix(agg[1, ])
  agg <- agg[-1, ]
  agg[] <- lapply(agg, function(x) type.convert(as.character(x)))
} else{
  agg <- data.table::fread('./data/desc_aggregates.csv')
}


for(i in names(agg)){
  agg %>% select(all_of(i)) %>% pull() %>% as.character() -> subset
  df <- df %>%
    mutate("{i}" := rowMeans(across(all_of(subset))))
}
#+end_src

#+RESULTS:
:results:
:end:


** Visual Check

#+begin_src R :results graphics file :file ./figs/IEF_overview.png
df %>%
  filter(Year == max(Year)) %>%
  filter(ISO %in% c("BRA", "USA", "CAN", "JPN", "BOL")) %>%
  ggplot(aes(x = reorder(ISO, -`Overall Score`), y = `Overall Score`, fill = `Overall Score`)) +
  geom_bar(stat = "identity")

ggsave('./figs/IEF_overview.png')
#+end_src

#+RESULTS:
[[file:./figs/IEF_overview.png]]


** Exporting

*** Full IEF dataset (=ief_full.csv=)

#+begin_src R
df %>%
  data.table::fwrite('./data/ief_full.csv')
#+end_src

#+RESULTS:
:results:
:end:

*** Only Aggregates (=ief_aggregates.csv=)

#+begin_src R
df %>%
  select(ISO, Year, `Overall Score`, names(agg)) %>%
  data.table::fwrite('./data/ief_aggregates.csv')
#+end_src

#+RESULTS:
:results:
:end:


** Principal Component Exploration

*** General

#+begin_src R :results graphics file :file ./figs/IEF_biplot.png

data.table::fread('./data/ief_full.csv') -> df

df <- df %>%
  group_by(ISO) %>%
  fill(.direction = "updown") %>%
  ungroup() %>%
  mutate(Case = paste0(ISO, "_", Year)) %>%
  select(-c(`Overall Score`, `Regulatory Efficiency`, `Rule of Law`, `Government Size`, `Open Markets`)) %>%
  select(-c(ISO, Year)) %>%
  drop_na() %>%
  column_to_rownames(var = "Case")

PCA(df, scale.unit = TRUE, ncp = 5, graph = FALSE) -> results

png('./figs/IEF_biplot.png')
fviz_pca_biplot(results, repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
                )
dev.off()
#+end_src

#+RESULTS:
[[file:./figs/IEF_biplot.png]]




*** Aggregates

#+begin_src R :results graphics file :file ./figs/IEF_agg_biplot.png

data.table::fread('./data/ief_full.csv') -> df

df <- df %>%
  group_by(ISO) %>%
  fill(.direction = "updown") %>%
  ungroup() %>%
  mutate(Case = paste0(ISO, "_", Year)) %>%
  select(`Regulatory Efficiency`, `Rule of Law`, `Government Size`, `Open Markets`, Case) %>%
  drop_na() %>%
  column_to_rownames(var = "Case")

PCA(df, scale.unit = TRUE, ncp = 4, graph = FALSE) -> results

png('./figs/IEF_agg_biplot.png')
fviz_pca_biplot(results,
                repel = TRUE,
                col.var = "#2E9FDF", # Variables color
                col.ind = "#696969"  # Individuals color
                ) %>%
  print()
dev.off()
#+end_src

#+RESULTS:
[[file:./figs/IEF_agg_biplot.png]]





** Specific TODOs

- Replace NAs
- Divide by 100

* Loading IMF dataset

** Quantitative Economic series dictionary

#+CAPTION: Description of series abbreviation
#+NAME: imf
|----------------------+-------------------------+--------------------------------------------------------------------+------------|
| Abbreviation         | Description             | Detail                                                             | Group      |
|----------------------+-------------------------+--------------------------------------------------------------------+------------|
| GG_GE_G01_CA_XDC     | Government Expenses     | Expense (Gen. Gov., Mil., Nom. - National Curr.)                   | Government |
| GG_GADL_T_G01_CA_XDC | Public Debt             | Liabilities, Transactions (Gen. Gov., Mil., Nom. - National Curr.) | Government |
| GG_GR_G01_CA_XDC     | Government Revenue      | Revenue (Gen. Gov., Mil., Nom. - National Curr.)                   | Government |
| GG_GEI_G01_CA_XDC    | Interest Expenses       | Interest (Gen. Gov., Mil., Nom. - National Curr.)                  | Government |
| NGDP_XDC             | GDP                     | GDP, Current Prices                                                | Demand     |
| NCP_XDC              | Household Consumption   | Household Consumption (w/ NPISHs, Nom. Domestic Curr.)             | Demand     |
| NCGG_XDC             | Government Consumption  | Government Consumption Expenditure (Nom. Domestic Curr.)           | Demand     |
| NFI_XDC              | Investment              | Gross Fixed Capital Formation (Nom. Domestic Curr.)                | Demand     |
| NINV_XDC             | Inventories             | Change in inventories (Nom. Domestic Curr.)                        | Supply     |
| NX_XDC               | Exports                 | Exports of Goods and Services (Nom. Domestic Curr.)                | Demand     |
| NM_XDC               | Imports                 | Imports of Goods and Service (Nom. Domestic Curr.)                 | Supply     |
| AIP_IX               | Industrial Production   | Industrial Production Index (2010=100)                             | Supply     |
| RAXG_USD             | Inter. Liq.             | International reserves (Excl. Gold, USD)                           | External   |
| RAFASDR_USD          | Inter. Liq. (official)  | International reserves, Official reserves, SDR (USD)               | External   |
| RAFAIMF_USD          | Inter. Liq. (IMF)       | International reserves, Official reserves, IMF position (USD)      | External   |
| BXG_BP6_USD          | Exports (BOP)           | Current Account - Goods and Services (Credit, USD)                 | BOP        |
| BMG_BP6_USD          | Imports (BOP)           | Current Account - Goods and Services (Debit, USD)                  | BOP        |
| BG_BP6_USD           | CA balance              | Current Account - Goods and Services (Net, USD)                    | BOP        |
| BK_DB_BP6_USD        | Capital Account         | Capital Account - Total (Debt, USD)                                | BOP        |
| BFDA_BP6_USD         | Financial Account       | Net Financial Account - (+ Lending, - Borrowing)                   | BOP        |
| FPE_IX               | Fin. Mkt Prices         | Financial Market Prices (Equities, Index)                          | Prices     |
| PPPI_IX              | Produces Prices         | Producer Prices Index (2010=100)                                   | Prices     |
| PCPI_IX              | Consumer Prices         | Consumer Prices Index (2010=100)                                   | Prices     |
| FPOLM_PA             | CB Interest rate        | Central Bank Policy rate (% per annum)                             | Interest   |
| FISR_PA              | Savings rate            | Savings rate (% per annum)                                         | Interest   |
| ENDE_XDC_USD_RATE    | Domestic Currency (end) | Domestic currency rate  per USD, End of period                     | Exchange   |
| ENDA_XDC_USD_RATE    | Domestic Currency (avg) | Domestic currency rate per USD, Period Average                     | Exchange   |
| TXG_FOB_USD          | Value of Exports        | Value of Exports (Goods, USD)                                      | Trade      |
| TMG_FOB_USD          | Value of Imports        | Value of Improts (Goods - FOB, USD)                                | Trade      |
|----------------------+-------------------------+--------------------------------------------------------------------+------------|


Alternatives for primary outcome (IFS):
- Central Government (including Social Security), Primary Net cash inflow from operating activities, Domestic Currency
- General Government, Primary Net cash inflow from operating activities, Domestic Currency
- Budgetary Central Government, Primary operating balance, Domestic Currency

** Importing IMF data

*** Quering data

#+begin_src R :var imf = imf :exports code

if(emacs){ # Replace VNs by its columns nates
  names(imf) <- as.matrix(imf[1, ])
  imf <- imf[-1, ]
  imf[] <- lapply(imf, function(x) type.convert(as.character(x)))
} else{
  imf <- data.table::fread('./data/desc_imf.csv')
}

series <- imf$Abbreviation %>% as.character() %>% c()
chunck_size <- 5
chuncks <- split(series, ceiling(seq_along(series)/chunck_size))

imfr::imf_data(
        database_id = 'IFS',
        indicator = series,
      ) -> df

df %>% data.table::fwrite('./data/IFS_full_dataset.csv')
#+end_src


*** Renaming variables

#+begin_src R :var imf = imf

if(emacs){ # Replace VNs by its columns nates
  names(imf) <- as.matrix(imf[1, ])
  imf <- imf[-1, ]
  imf[] <- lapply(imf, function(x) type.convert(as.character(x)))
} else{
  imf <- data.table::fread('./data/desc_imf.csv')
}


colnames <- c("ISO", "Year", imf$Description %>% as.character())

df <- data.table::fread('./data/IFS_full_dataset.csv') %>%
  rename(ISO = iso2c) %>%
  mutate(ISO = countrycode::countrycode(
                              ISO,
                              origin ='iso2c',
                              destination ='iso3c',
                              warn = FALSE)) %>%
  setNames(colnames)

df %>% data.table::fwrite('./data/IFS_full_renamed.csv')
#+end_src

#+RESULTS:
:results:
:end:



** Importing HPPD data and merging with IFS

#+begin_src R
df <- imfr::imf_data(database_id = "HPDD", indicator = "GGXWDG_GDP") %>%
  rename(`Debt/GDP` = GGXWDG_GDP) %>%
  rename(Year = year) %>%
  mutate(Year = as.numeric(Year)) %>%
  rename(ISO = iso2c) %>%
  mutate(ISO = countrycode::countrycode(
                              ISO,
                              origin ='iso2c',
                              destination ='iso3c',
                              warn = FALSE))

df %>% data.table::fwrite('./data/HPDD_Public_Debt.csv')

ifs <- data.table::fread('./data/IFS_full_renamed.csv')

ifs <- ifs %>%
  left_join(df)

ifs %>% data.table::fwrite('./data/IFS_HPDD.csv')
#+end_src

#+RESULTS:
:results:
  |                                                                              |                                                                      |   0%  |                                                                              |=======                                                               |  10%  |                                                                              |======================================================================| 100%
  |                                                                              |                                                                      |   0%  |                                                                              |=======                                                               |  10%  |                                                                              |======================================================================| 100%
  |                                                                              |                                                                      |   0%  |                                                                              |=======                                                               |  10%  |                                                                              |=========================                                             |  36%  |                                                                              |===========================================                           |  61%  |                                                                              |=============================================================         |  87%  |                                                                              |======================================================================| 100%
  |                                                                              |                                                                      |   0%  |                                                                              |========                                                              |  11%  |                                                                              |======================================================================| 100%
  |                                                                              |                                                                      |   0%  |                                                                              |======================================================================| 100%
Joining, by = c("ISO", "Year")
:end:

** Primary outcome from WEO

*** Download

#+BEGIN_SRC python
import weo

weo.download(year=2021, release="Apr", filename="./data/weo/weo.csv")
#+END_SRC

#+RESULTS:
:results:
data/weo/weo.csv 9.3Mb
Downloaded 2021-Apr WEO dataset
:end:



*** Clean

#+begin_src R

years <- seq(1995, 2021, by = 1) %>% as.character

df <- data.table::fread('./data/weo/weo.csv', na.strings="n/a") %>%
  filter(`WEO Subject Code` %in% c("GGXONLB", "GGXONLB_NGDP")) %>%
  select(ISO, `WEO Subject Code`, all_of(years)) %>%
  pivot_longer(
    cols = years,
    names_to = "Year",
    values_to = "Val"
  ) %>%
  pivot_wider(
    names_from = `WEO Subject Code`,
    values_from = "Val"
  ) %>%
  rename(
    `Primary Outcome` = `GGXONLB`,
    `Primary Outcome/GDP` = `GGXONLB_NGDP`
  )

df %>% data.table::fwrite('./data/primary_outcome.csv')
#+end_src

#+RESULTS:
:results:
:end:

*** Merging with previous dataset

#+begin_src R

weo <- data.table::fread('./data/primary_outcome.csv')

df <- data.table::fread('./data/IFS_HPDD.csv')

df <- df %>%
  left_join(weo)

df %>% data.table::fwrite('./data/IFS_HPDD_WEO.csv')
#+end_src

#+RESULTS:
:results:
Joining, by = c("ISO", "Year", "Primary Outcome")
Erro: Can't join on `x$Primary Outcome` x `y$Primary Outcome` because of incompatible types.
[34m‚Ñπ[39m `x$Primary Outcome` is of type <double>>.
[34m‚Ñπ[39m `y$Primary Outcome` is of type <character>>.
[90mRun `rlang::last_error()` to see where the error occurred.[39m
:end:

** Primary outcome from WEO

*** Download

#+BEGIN_SRC python
import weo

weo.download(year=2021, release="Apr", filename="./data/weo/weo.csv")
#+END_SRC

#+RESULTS:
:results:
data/weo/weo.csv 9.3Mb
Downloaded 2021-Apr WEO dataset
:end:



*** Clean

#+begin_src R

years <- seq(1995, 2021, by = 1) %>% as.character

df <- data.table::fread('./data/weo/weo.csv', na.strings="n/a") %>%
  filter(`WEO Subject Code` %in% c("GGXONLB", "GGXONLB_NGDP")) %>%
  select(ISO, `WEO Subject Code`, all_of(years)) %>%
  pivot_longer(
    cols = years,
    names_to = "Year",
    values_to = "Val"
  ) %>%
  pivot_wider(
    names_from = `WEO Subject Code`,
    values_from = "Val"
  ) %>%
  rename(
    `Primary Outcome` = `GGXONLB`,
    `Primary Outcome/GDP` = `GGXONLB_NGDP`
  )

df %>% data.table::fwrite('./data/primary_outcome.csv')
#+end_src

#+RESULTS:
:results:
:end:


#+BEGIN_SRC python
import weo

weo.download(year=2020, release="Apr", filename="./weo/weo.csv")
#+END_SRC



** Defining derived variables

#+BEGIN_SRC python
df = pd.read_csv(
    './data/IFS_HPDD_WEO.csv',
    index_col = ["ISO"],
    parse_dates = True
)

# df["Debt/GDP"] = df["Public Debt"]/df["GDP"]
df["Investment share"] = df["Investment"]/df["GDP"]
df["CA Balance/GDP"] = df["CA balance"]/df["GDP"]
df["Capital Account/GDP"] = df["Capital Account"]/df["GDP"]
df["Growth"] = df["GDP"].groupby('ISO').pct_change()
# df["Primary Outcome"] = df["Government Expenses"] - df["Government Revenue"] + df["Interest Expenses"]
# df["Primary Outcome/GDP"] = df["Primary Outcome"]/df["GDP"]

df.to_csv('./data/IFS_Derivated_Series.csv', index_label = "ISO")
#+END_SRC

#+RESULTS:
:results:
:end:

** Principal Component Exploration

#+begin_src R :results graphics file :file ./figs/IFS_biplot.png

data.table::fread("./data/IFS_Derivated_Series.csv") -> df

df <- df %>%
  group_by(ISO) %>%
  fill(.direction = "updown") %>%
  ungroup() %>%
  mutate(Case = paste0(ISO, "_", Year)) %>%
  select(Case, `Debt/GDP`, `Primary Outcome/GDP`, `CA Balance/GDP`, `Capital Account/GDP`, Growth) %>%
  drop_na() %>%
  column_to_rownames(var = "Case")

PCA(df, scale.unit = TRUE, ncp = 5, graph = FALSE) -> results

png("./figs/IFS_biplot.png")
fviz_pca_biplot(results,
  repel = TRUE,
  col.var = "#2E9FDF", # Variables color
  col.ind = "#696969" # Individuals color
) %>% print()
dev.off()
#+end_src

#+RESULTS:
[[file:./figs/IFS_biplot.png]]


* Loading rating index dataset (trending economics)


** Downloading dataset

In this case, we are aggregating different rates in the same year (if it occurs) with agency mean.

#+BEGIN_SRC python
categories = pd.read_html(
    'https://tradingeconomics.com/country-list/rating',
    index_col = [-1]
)[1]

for j in range(2,categories.shape[1]):

    fuzzies = {
        categories.iloc[i,1] : categories.iloc[i,0]/100 for i in range(categories.shape[0])
    }
    fuzzies.update(
        {
        categories.iloc[i,j] : categories.iloc[i,0]/100 for i in range(categories.shape[0])
    }
    )

def fuzzy_rating(grade):
    result = grade.map(fuzzies)
    # result = grade.map(fuzzies).mean()
    return result

countries = pd.read_html(
    'https://tradingeconomics.com/country-list/rating',
)[0]
countries = countries["Unnamed: 0"].to_list()
countries = [i.lower().strip().replace(" ", "-") for i in countries]

errors = []
empties = []

rating = pd.DataFrame()
for country in countries:
    try:
        url = f"https://tradingeconomics.com/{country}/rating"
        df = pd.read_html(
                url,
                parse_dates=True,
                index_col=[-1]
        )[0]
        df.index.name = 'Date'
        df["ISO"] = converter.convert(names = country.replace('-', ' '), to = 'ISO3',)
        df["Year"] = [i.year for i in df.index]
        df = df.reset_index()
        # df = df.set_index('ISO')
        df["Rating"] = fuzzy_rating(grade=df["Rating"])
        df = df.pivot_table(
            index=["ISO", "Year"],
            columns="Agency",
            values="Rating",
            aggfunc=np.mean)
        df = df.reset_index(level=[0,1])
        df.columns.name = ''
        if df.empty:
            empties.append(country)
            pass
        else:
            rating = rating.append(df)
    except (KeyError, ValueError) as e:
        errors.append(e)
        # print(f"{country} data is not available")
        # print(f"Warning message: {e}")
        pass

rating = rating[rating["ISO"] != "not found"]
rating["OECD"] = rating["ISO"].isin(oecd)
rating["Rating"] = rating[["S&P", "Fitch", "Moody's"]].mean(axis=1)
rating.to_csv('./data/rating_fulldataset_numeric.csv')
#+END_SRC

#+RESULTS:
:results:
european union not found in regex
:end:


* Merging datasets


** Creating df

#+begin_src R
data.table::fread("./data/ief_full.csv") -> ief
data.table::fread("./data/IFS_Derivated_Series.csv") -> imf
data.table::fread("./data/rating_fulldataset_numeric.csv") -> rating

df <- ief %>% left_join(imf, by = c("ISO", "Year"))
df <- df %>% left_join(rating, by = c("ISO", "Year"))

# Replacing NA

df <- df %>%
  group_by(ISO) %>%
  fill(everything(), .direction = "updown") %>%
  ungroup() %>%
  mutate(Case = paste0(ISO, "_", Year))

df %>% data.table::fwrite('./data/ief_imf_rating.csv')

#+end_src

#+RESULTS:
:results:
:end:


:results:

R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R √© um software livre e vem sem GARANTIA ALGUMA.
Voc√™ pode redistribu√≠-lo sob certas circunst√¢ncias.
Digite 'license()' ou 'licence()' para detalhes de distribui√ß√£o.

R √© um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informa√ß√µes e
'citation()' para saber como citar o R ou pacotes do R em publica√ß√µes.

Digite 'demo()' para demonstra√ß√µes, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

[√Årea de trabalho anterior carregada]
setwd('/HDD/PhD/Articles/ratings_QCA/')
library(tidyverse)
library(tidygeocoder)
library(data.table)
library(FactoMineR)
library(factoextra)

emacs <- TRUE
'org_babel_R_eoe'
‚îÄ‚îÄ Attaching packages ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse 1.3.0 ‚îÄ‚îÄ
‚úî ggplot2 3.3.3     ‚úî purrr   0.3.4
‚úî tibble  3.0.6     ‚úî dplyr   1.0.4
‚úî tidyr   1.1.2     ‚úî stringr 1.4.0
‚úî readr   1.4.0     ‚úî forcats 0.5.1
‚îÄ‚îÄ Conflicts ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ tidyverse_conflicts() ‚îÄ‚îÄ
‚úñ dplyr::filter() masks stats::filter()
‚úñ dplyr::lag()    masks stats::lag()
data.table 1.13.6 using 2 threads (see ?getDTthreads).  Latest news: r-datatable.com

Attaching package: ‚Äòdata.table‚Äô

The following objects are masked from ‚Äòpackage:dplyr‚Äô:

    between, first, last

The following object is masked from ‚Äòpackage:purrr‚Äô:

    transpose
Welcome! Want to learn more? See two factoextra-related books at https://goo.gl/ve3WBa
[1] "org_babel_R_eoe"
data.table::fread('./data/ief_full.csv') -
ief
data.table::fread('./data/IFS_Derivated_Series.csv') -
imf
data.table::fread('./data/rating_fulldataset_numeric.csv') -
rating
'org_babel_R_eoe'

R version 4.0.4 (2021-02-15) -- "Lost Library Book"
Copyright (C) 2021 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R √© um software livre e vem sem GARANTIA ALGUMA.
Voc√™ pode redistribu√≠-lo sob certas circunst√¢ncias.
Digite 'license()' ou 'licence()' para detalhes de distribui√ß√£o.

R √© um projeto colaborativo com muitos contribuidores.
Digite 'contributors()' para obter mais informa√ß√µes e
'citation()' para saber como citar o R ou pacotes do R em publica√ß√µes.

Digite 'demo()' para demonstra√ß√µes, 'help()' para o sistema on-line de ajuda,
ou 'help.start()' para abrir o sistema de ajuda em HTML no seu navegador.
Digite 'q()' para sair do R.

[√Årea de trabalho anterior carregada]
Error in data.table::fread("./data/rating_fulldataset_numeric.csv") : 
  File './data/rating_fulldataset_numeric.csv' does not exist or is non-readable. getwd()=='/HDD/PhD/Articles/ratings_QCA'
:end:

** Creating yearly min, max and mean

#+begin_src R


df <- data.table::fread("./data/ief_imf_rating.csv")

means <- df %>%
  group_by(Year) %>%
  summarise(
    Growth = mean(Growth, na.rm = TRUE),
    `Debt/GDP` = mean(`Debt/GDP`, na.rm = TRUE),
    `CA Balance/GDP` = mean(`CA Balance/GDP`, na.rm = TRUE),
    `Capital Account/GDP` = mean(`Capital Account/GDP`, na.rm = TRUE),
    `Primary Outcome/GDP` = mean(`Primary Outcome/GDP`, na.rm = TRUE),
  ) %>%
  mutate(ISO = "Mean") %>%
  ungroup()

maxs <- df %>%
  group_by(Year) %>%
  summarise(
    Growth = max(Growth, na.rm = TRUE),
    `Debt/GDP` = max(`Debt/GDP`, na.rm = TRUE),
    `CA Balance/GDP` = max(`CA Balance/GDP`, na.rm = TRUE),
    `Capital Account/GDP` = max(`Capital Account/GDP`, na.rm = TRUE),
    `Primary Outcome/GDP` = max(`Primary Outcome/GDP`, na.rm = TRUE),
  ) %>%
  mutate(ISO = "Max") %>%
  ungroup()

mins <- df %>%
  group_by(Year) %>%
  summarise(
    Growth = min(Growth, na.rm = TRUE),
    `Debt/GDP` = min(`Debt/GDP`, na.rm = TRUE),
    `CA Balance/GDP` = min(`CA Balance/GDP`, na.rm = TRUE),
    `Capital Account/GDP` = min(`Capital Account/GDP`, na.rm = TRUE),
    `Primary Outcome/GDP` = min(`Primary Outcome/GDP`, na.rm = TRUE),
  ) %>%
  mutate(ISO = "Min") %>%
  ungroup()

medians <- df %>%
  group_by(Year) %>%
  summarise(
    Growth = median(Growth, na.rm = TRUE),
    `Debt/GDP` = median(`Debt/GDP`, na.rm = TRUE),
    `CA Balance/GDP` = median(`CA Balance/GDP`, na.rm = TRUE),
    `Capital Account/GDP` = median(`Capital Account/GDP`, na.rm = TRUE),
    `Primary Outcome/GDP` = median(`Primary Outcome/GDP`, na.rm = TRUE),
  ) %>%
  mutate(ISO = "Median") %>%
  ungroup()

stats <- bind_rows(means, maxs, mins, medians)

stats %>% data.table::fwrite('./data/ief_imf_rating_stats.csv')
#+end_src

#+RESULTS:
:results:
:end:


** Filtering prime rates

#+begin_src R

df <- data.table::fread("./data/ief_imf_rating.csv")


bests <- df %>%
  group_by(Year) %>%
  filter(Rating >= 0.95) %>%
  fill(.direction = "updown") %>%
  summarise(
    Growth = mean(Growth, na.rm = TRUE),
    `Debt/GDP` = mean(`Debt/GDP`, na.rm = TRUE),
    `CA Balance/GDP` = mean(`CA Balance/GDP`, na.rm = TRUE),
    `Capital Account/GDP` = mean(`Capital Account/GDP`, na.rm = TRUE),
    `Primary Outcome/GDP` = mean(`Primary Outcome/GDP`, na.rm = TRUE),
    `Overall Score` = mean(`Overall Score`, na.rm = TRUE),
    `Rule of Law` = mean(`Rule of Law`, na.rm = TRUE),
    `Government Size` = mean(`Government Size`, na.rm = TRUE),
    `Open Markets` = mean(`Open Markets`, na.rm = TRUE),
    `Regulatory Efficiency` = mean(`Regulatory Efficiency`, na.rm = TRUE),
  ) %>%
  mutate(ISO = "BEST") %>%
  ungroup()

bests %>% data.table::fwrite("./data/ief_imf_rating_best.csv")
#+end_src

#+RESULTS:
:results:
:end:

** Remerging

#+begin_src R

bests <- data.table::fread('./data/ief_imf_rating_best.csv')
stats <- data.table::fread('./data/ief_imf_rating_stats.csv')
df <- data.table::fread("./data/ief_imf_rating.csv")

df <- bind_rows(df, bests, stats)


df %>% data.table::fwrite('./data/dataset_stats_bests.csv')

#+end_src

#+RESULTS:
:results:
:end:


** Calculate relative values


#+begin_src R

df <- data.table::fread('./data/dataset_stats_bests.csv') %>%
  group_by(ISO) %>%
  fill(.direction = "updown") %>%
  ungroup()
bests <- data.table::fread('./data/ief_imf_rating_best.csv')

incompletes <- df %>% group_by(ISO) %>% mutate(n = n()) %>% ungroup() %>% filter(n != nrow(bests)) %>% select(ISO) %>% unique()

df <- df %>%
  group_by(ISO) %>%
  mutate(n = n()) %>%
  filter(n == nrow(bests)) %>% # sanity check
  mutate(
    relative_growth = Growth/bests$Growth,
    relative_debt_gdp = `Debt/GDP`/(bests$`Debt/GDP`),
    relative_primary_gdp = `Primary Outcome/GDP`/(bests$`Primary Outcome/GDP`),
    relative_ca_gdp = `CA Balance/GDP`/(bests$`CA Balance/GDP`),
    relative_capitalacc_gdp = `Capital Account/GDP`/(bests$`Capital Account/GDP`),
    relative_gov_size = `Government Size`/(bests$`Government Size`),
    relative_ruleoflaw = `Rule of Law`/(bests$`Rule of Law`),
    relative_open_mkt = `Open Markets`/(bests$`Open Markets`),
    relative_reg_eff = `Regulatory Efficiency`/(bests$`Regulatory Efficiency`),
    relative_overall_score = `Overall Score`/(bests$`Overall Score`)
  ) %>%
  ungroup()

df %>% data.table::fwrite('./data/dataset_relative_macro_aggregates.csv')

#+end_src

#+RESULTS:
:results:
:end:



** Correct

- Primary Outcome

* Calibrating variables

** Importing, subseting and adapting variables names for readability


#+begin_src R
df <- data.table::fread('./data/dataset_relative_macro_aggregates.csv') %>%
  select(
    ISO, Case, OECD,
    `Government Size`, `Regulatory Efficiency`, `Open Markets`, `Rule of Law`,
    relative_growth, relative_debt_gdp, relative_primary_gdp, relative_ca_gdp, relative_capitalacc_gdp,
    Rating
  ) %>%
  rename(
    Growth = relative_growth,
    `Public Debt/GDP` = relative_debt_gdp,
    `Primary Outcome/GDP` = relative_primary_gdp,
    `CA Balance/GDP` = relative_ca_gdp,
    `Capital Acc/GDP` = relative_capitalacc_gdp
  ) %>%
  filter(
    ISO != "BEST",
    ISO != "Median", ISO != "Mean", ISO != "Min", ISO != "Max"
    ) %>%
  select(-c(ISO)) %>%
  drop_na(Rating)

df %>% data.table::fwrite('./data/df_pre_calibration.csv')
#+end_src

#+RESULTS:
:results:
:end:

* Truth Tables

** Presence of Outcome (Rating Increase)
** Absence of Outcome (Rating Decrease)

* Minimization

* Analysis

* Robustness check
